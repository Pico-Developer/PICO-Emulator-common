From db26e26f4d2d42125c5df076bf88fdb030eee92b Mon Sep 17 00:00:00 2001
From: unknown <lfy@lfy0-w.ad.corp.google.com>
Date: Wed, 30 Mar 2016 08:02:10 -0700
Subject: [PATCH 1/3] Current emulator-specific ANGLE modifications.

---
 src/libANGLE/Config.cpp                        |  6 +++++-
 src/libANGLE/Config.h                          |  1 +
 src/libANGLE/Display.cpp                       | 10 ++++++++++
 src/libANGLE/renderer/d3d/DisplayD3D.cpp       |  6 +++++-
 src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp |  5 +++--
 src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp   | 20 +++++++++++++++-----
 src/libANGLE/validationES2.cpp                 | 13 +++++++++++++
 7 files changed, 52 insertions(+), 9 deletions(-)

diff --git a/src/libANGLE/Config.cpp b/src/libANGLE/Config.cpp
index d511df3..52c6453 100644
--- a/src/libANGLE/Config.cpp
+++ b/src/libANGLE/Config.cpp
@@ -58,7 +58,8 @@ Config::Config()
       transparentRedValue(0),
       transparentGreenValue(0),
       transparentBlueValue(0),
-      optimalOrientation(0)
+      optimalOrientation(0),
+	  frameBufferTargetAndroid(1)
 {
 }
 
@@ -232,6 +233,7 @@ std::vector<const Config*> ConfigSet::filter(const AttributeMap &attributeMap) c
               case EGL_LEVEL:                     match = config.level >= attributeValue;                             break;
               case EGL_NATIVE_RENDERABLE:         match = config.nativeRenderable == (EGLBoolean)attributeValue;      break;
               case EGL_NATIVE_VISUAL_TYPE:        match = config.nativeVisualType == attributeValue;                  break;
+			  case EGL_NATIVE_VISUAL_ID:          break;
               case EGL_SAMPLES:                   match = config.samples >= attributeValue;                           break;
               case EGL_SAMPLE_BUFFERS:            match = config.sampleBuffers >= attributeValue;                     break;
               case EGL_SURFACE_TYPE:              match = (config.surfaceType & attributeValue) == attributeValue;    break;
@@ -255,6 +257,8 @@ std::vector<const Config*> ConfigSet::filter(const AttributeMap &attributeMap) c
               case EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE:
                   match = config.optimalOrientation == attributeValue;
                   break;
+			  case EGL_RECORDABLE_ANDROID:        break;
+			  case EGL_FRAMEBUFFER_TARGET_ANDROID:match = config.frameBufferTargetAndroid == attributeValue;          break;
               default: UNREACHABLE();
             }
 
diff --git a/src/libANGLE/Config.h b/src/libANGLE/Config.h
index 00f5673..5aa60ce 100644
--- a/src/libANGLE/Config.h
+++ b/src/libANGLE/Config.h
@@ -65,6 +65,7 @@ struct Config
     EGLint transparentGreenValue;   // Transparent green value
     EGLint transparentBlueValue;    // Transparent blue value
     EGLint optimalOrientation;      // Optimal window surface orientation
+	EGLint frameBufferTargetAndroid;// Android target framebuffer
 };
 
 class ConfigSet
diff --git a/src/libANGLE/Display.cpp b/src/libANGLE/Display.cpp
index 486c74a..d362686 100644
--- a/src/libANGLE/Display.cpp
+++ b/src/libANGLE/Display.cpp
@@ -132,6 +132,7 @@ rx::DisplayImpl *CreateDisplayFromDevice(Device *eglDevice)
 
 rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
 {
+	fprintf(stderr, "ANGLE: %s: call\n", __FUNCTION__);
     rx::DisplayImpl *impl = nullptr;
     EGLint displayType = attribMap.get(EGL_PLATFORM_ANGLE_TYPE_ANGLE, EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE);
     switch (displayType)
@@ -139,6 +140,7 @@ rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
       case EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE:
 #if defined(ANGLE_ENABLE_D3D9) || defined(ANGLE_ENABLE_D3D11)
         // Default to D3D displays
+		fprintf(stderr, "ANGLE: %s: make D3D display\n", __FUNCTION__);
         impl = new rx::DisplayD3D();
 #elif defined(ANGLE_USE_X11)
         impl = new rx::DisplayGLX();
@@ -163,6 +165,7 @@ rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
       case EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE:
 #if defined(ANGLE_ENABLE_OPENGL)
 #if defined(ANGLE_PLATFORM_WINDOWS)
+		fprintf(stderr, "ANGLE: %s: make WGL display\n", __FUNCTION__);
         impl = new rx::DisplayWGL();
 #elif defined(ANGLE_USE_X11)
         impl = new rx::DisplayGLX();
@@ -201,6 +204,7 @@ rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
 
 Display *Display::GetDisplayFromAttribs(void *native_display, const AttributeMap &attribMap)
 {
+	fprintf(stderr, "ANGLE: %s: call\n", __FUNCTION__); 
     // Initialize the global platform if not already
     InitDefaultPlatformImpl();
 
@@ -212,14 +216,17 @@ Display *Display::GetDisplayFromAttribs(void *native_display, const AttributeMap
     ANGLEPlatformDisplayMap::const_iterator iter = displays->find(displayId);
     if (iter != displays->end())
     {
+		fprintf(stderr, "ANGLE: %s: picked a display\n", __FUNCTION__);
         display = iter->second;
     }
 
     if (display == nullptr)
     {
+		fprintf(stderr, "ANGLE: %s: native display case\n", __FUNCTION__);
         // Validate the native display
         if (!Display::isValidNativeDisplay(displayId))
         {
+			fprintf(stderr, "ANGLE: %s: invalid native display case\n", __FUNCTION__);
             return NULL;
         }
 
@@ -230,6 +237,7 @@ Display *Display::GetDisplayFromAttribs(void *native_display, const AttributeMap
     // Apply new attributes if the display is not initialized yet.
     if (!display->isInitialized())
     {
+		fprintf(stderr, "ANGLE: %s: Apply display attributes\n", __FUNCTION__);
         rx::DisplayImpl *impl = CreateDisplayFromAttribs(attribMap);
         if (impl == nullptr)
         {
@@ -509,6 +517,8 @@ bool Display::getConfigAttrib(const Config *configuration, EGLint attribute, EGL
           }
           *value = configuration->optimalOrientation;
           break;
+	  case EGL_RECORDABLE_ANDROID:         break;
+	  case EGL_FRAMEBUFFER_TARGET_ANDROID: *value = configuration->frameBufferTargetAndroid; break;
 
       default:
         return false;
diff --git a/src/libANGLE/renderer/d3d/DisplayD3D.cpp b/src/libANGLE/renderer/d3d/DisplayD3D.cpp
index d4dc702..7a8bcd5 100644
--- a/src/libANGLE/renderer/d3d/DisplayD3D.cpp
+++ b/src/libANGLE/renderer/d3d/DisplayD3D.cpp
@@ -35,7 +35,11 @@
 
 #if !defined(ANGLE_DEFAULT_D3D11)
 // Enables use of the Direct3D 11 API for a default display, when available
-#   define ANGLE_DEFAULT_D3D11 1
+// For emulator dev purposes, try turning off D3d11 for now
+// D3D11 sorta works, but probably there are some incompatibilities
+// with texture coordinates and axis orientations (some things draw upside down
+// for a bit, for example).
+#   define ANGLE_DEFAULT_D3D11 0
 #endif
 
 namespace rx
diff --git a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
index a3e141a..24f001e 100644
--- a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
@@ -878,14 +878,15 @@ void Renderer11::populateRenderer11DeviceCaps()
 
 egl::ConfigSet Renderer11::generateConfigs() const
 {
+	fprintf(stderr, "ANGLE: D3D11: %s\n", __FUNCTION__);
     std::vector<GLenum> colorBufferFormats;
 
     // 32-bit supported formats
-    colorBufferFormats.push_back(GL_BGRA8_EXT);
+    //colorBufferFormats.push_back(GL_BGRA8_EXT);
     colorBufferFormats.push_back(GL_RGBA8_OES);
 
     // 24-bit supported formats
-    colorBufferFormats.push_back(GL_RGB8_OES);
+    //colorBufferFormats.push_back(GL_RGB8_OES);
 
     if (!mPresentPathFastEnabled)
     {
diff --git a/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp b/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
index 42d4d04..ad6c2cc 100644
--- a/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
+++ b/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
@@ -392,11 +392,14 @@ D3DPRESENT_PARAMETERS Renderer9::getDefaultPresentParameters()
 
 egl::ConfigSet Renderer9::generateConfigs() const
 {
+	fprintf(stderr, "ANGLE: D3D9: %s\n", __FUNCTION__);
     static const GLenum colorBufferFormats[] =
     {
-        GL_BGR5_A1_ANGLEX,
-        GL_BGRA8_EXT,
-        GL_RGB565,
+		GL_RGBA8,
+
+        //GL_BGR5_A1_ANGLEX,
+        //GL_BGRA8_EXT,
+        //GL_RGB565,
 
     };
 
@@ -444,7 +447,7 @@ egl::ConfigSet Renderer9::generateConfigs() const
         minSwapInterval = std::min(minSwapInterval, 4);
         maxSwapInterval = std::max(maxSwapInterval, 4);
     }
-
+	fprintf(stderr, "ANGLE: d3d9: min swap interval = %d max swap interval = %d\n", minSwapInterval, maxSwapInterval);
     egl::ConfigSet configs;
     for (size_t formatIndex = 0; formatIndex < ArraySize(colorBufferFormats); formatIndex++)
     {
@@ -472,11 +475,18 @@ egl::ConfigSet Renderer9::generateConfigs() const
                     config.luminanceSize = colorBufferFormatInfo.luminanceBits;
                     config.alphaSize = colorBufferFormatInfo.alphaBits;
                     config.alphaMaskSize = 0;
+					fprintf(stderr, "sizes: R %d G %d B %d A %d\n", config.redSize, config.greenSize, config.blueSize, config.alphaSize);
+
                     config.bindToTextureRGB = (colorBufferFormatInfo.format == GL_RGB);
                     config.bindToTextureRGBA = (colorBufferFormatInfo.format == GL_RGBA || colorBufferFormatInfo.format == GL_BGRA_EXT);
+					fprintf(stderr, "bindToTextureRGB=%d, bindToTextureRGBA=%d\n", config.bindToTextureRGB, config.bindToTextureRGBA);
                     config.colorBufferType = EGL_RGB_BUFFER;
                     // Mark as slow if blits to the back-buffer won't be straight forward
-                    config.configCaveat = (currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat) ? EGL_NONE : EGL_SLOW_CONFIG;
+                    // HACK: For emulator, don't do this or hwui will complain
+					// config.configCaveat = (currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat) ? EGL_NONE : EGL_SLOW_CONFIG;
+					config.configCaveat = EGL_NONE;
+					fprintf(stderr, "ANGLE: D3D9: EGL_FAST_CONFIG? %d (marking config caveat as EGL_NONE anyway :} )\n", currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat);
+
                     config.configID = static_cast<EGLint>(configs.size() + 1);
                     config.conformant = EGL_OPENGL_ES2_BIT;
                     config.depthSize = depthStencilBufferFormatInfo.depthBits;
diff --git a/src/libANGLE/validationES2.cpp b/src/libANGLE/validationES2.cpp
index ee5ac41..54615a1 100644
--- a/src/libANGLE/validationES2.cpp
+++ b/src/libANGLE/validationES2.cpp
@@ -491,6 +491,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
     if (!ValidateCopyTexImageParametersBase(context, target, level, internalformat, isSubImage,
                                             xoffset, yoffset, 0, x, y, width, height, border, &textureInternalFormat))
     {
+		fprintf(stderr, "ANGLE: %s: canot validate from base. return.\n", __FUNCTION__);
         return false;
     }
 
@@ -511,6 +512,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                 colorbufferFormat != GL_RGBA8_OES)
             {
                 context->recordError(Error(GL_INVALID_OPERATION));
+				fprintf(stderr, "ANGLE: %s: GL_ALPHA case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
                 return false;
             }
             break;
@@ -523,6 +525,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                   colorbufferFormat != GL_RGB5_A1 &&
                   colorbufferFormat != GL_RGBA8_OES)
               {
+				  fprintf(stderr, "ANGLE: %s: GL_LUMINANCE case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
                   context->recordError(Error(GL_INVALID_OPERATION));
                   return false;
               }
@@ -540,6 +543,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                   colorbufferFormat != GL_RGB32F &&
                   colorbufferFormat != GL_RGBA32F)
               {
+				  fprintf(stderr, "ANGLE: %s: GL_RED_EXT case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
                   context->recordError(Error(GL_INVALID_OPERATION));
                   return false;
               }
@@ -555,6 +559,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                   colorbufferFormat != GL_RGB32F &&
                   colorbufferFormat != GL_RGBA32F)
               {
+				  fprintf(stderr, "ANGLE: %s: GL_RG_EXT case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
                   context->recordError(Error(GL_INVALID_OPERATION));
                   return false;
               }
@@ -568,6 +573,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                 colorbufferFormat != GL_RGB32F &&
                 colorbufferFormat != GL_RGBA32F)
             {
+				fprintf(stderr, "ANGLE: %s: GL_RGB case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
                 context->recordError(Error(GL_INVALID_OPERATION));
                 return false;
             }
@@ -579,6 +585,8 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
                 colorbufferFormat != GL_RGBA8_OES &&
                 colorbufferFormat != GL_RGBA32F)
             {
+				fprintf(stderr, "ANGLE: %s: GL_RGBA/LUMINANCE_ALPHA case: wrong texture vs color bufer format (0x%x). return.\n", __FUNCTION__, colorbufferFormat);
+
                 context->recordError(Error(GL_INVALID_OPERATION));
                 return false;
             }
@@ -589,13 +597,16 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
           case GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE:
           case GL_ETC1_RGB8_OES:
           case GL_ETC1_RGB8_LOSSY_DECODE_ANGLE:
+			  fprintf(stderr, "ANGLE: %s: NOT SUPORT ETC1 or compresed! return.\n", __FUNCTION__);
             context->recordError(Error(GL_INVALID_OPERATION));
             return false;
           case GL_DEPTH_COMPONENT:
           case GL_DEPTH_STENCIL_OES:
+			  fprintf(stderr, "ANGLE: %s: NOT SUPORT DepthstencilOES! return.\n", __FUNCTION__);
             context->recordError(Error(GL_INVALID_OPERATION));
             return false;
           default:
+			  fprintf(stderr, "ANGLE: %s: wut. textureFormat=%d\n", __FUNCTION__, textureFormat);
             context->recordError(Error(GL_INVALID_OPERATION));
             return false;
         }
@@ -603,12 +614,14 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
         if (internalFormatInfo.type == GL_FLOAT &&
             !context->getExtensions().textureFloat)
         {
+			fprintf(stderr, "ANGLE: %s: wut. Y float textures?\n", __FUNCTION__);
             context->recordError(Error(GL_INVALID_OPERATION));
             return false;
         }
     }
     else
     {
+		fprintf(stderr, "ANGLE: %s: wut. is not sub image?\n", __FUNCTION__);
         switch (internalformat)
         {
           case GL_ALPHA:
-- 
1.9.5.chromium.6

