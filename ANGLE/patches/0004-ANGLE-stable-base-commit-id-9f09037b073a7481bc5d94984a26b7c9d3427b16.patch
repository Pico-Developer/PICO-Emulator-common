diff --git a/src/libANGLE/Caps.cpp b/src/libANGLE/Caps.cpp
index 88d60a638..1275028db 100644
--- a/src/libANGLE/Caps.cpp
+++ b/src/libANGLE/Caps.cpp
@@ -552,17 +552,16 @@ const ExtensionInfoMap &GetExtensionInfoMap()
         };
 
         // clang-format off
-        // emulator does not support selected GL Extensions
-		ExtensionInfoMap map;
+        ExtensionInfoMap map;
         map["GL_OES_element_index_uint"] = enableableExtension(&Extensions::elementIndexUint);
         map["GL_OES_packed_depth_stencil"] = esOnlyExtension(&Extensions::packedDepthStencil);
-//        map["GL_OES_get_program_binary"] = esOnlyExtension(&Extensions::getProgramBinary);
+        map["GL_OES_get_program_binary"] = esOnlyExtension(&Extensions::getProgramBinary);
         map["GL_OES_rgb8_rgba8"] = esOnlyExtension(&Extensions::rgb8rgba8);
         map["GL_EXT_texture_format_BGRA8888"] = esOnlyExtension(&Extensions::textureFormatBGRA8888);
         map["GL_EXT_read_format_bgra"] = esOnlyExtension(&Extensions::readFormatBGRA);
         map["GL_NV_pixel_buffer_object"] = esOnlyExtension(&Extensions::pixelBufferObject);
-//        map["GL_OES_mapbuffer"] = esOnlyExtension(&Extensions::mapBuffer);
-//        map["GL_EXT_map_buffer_range"] = esOnlyExtension(&Extensions::mapBufferRange);
+        map["GL_OES_mapbuffer"] = esOnlyExtension(&Extensions::mapBuffer);
+        map["GL_EXT_map_buffer_range"] = esOnlyExtension(&Extensions::mapBufferRange);
         map["GL_EXT_color_buffer_half_float"] = esOnlyExtension(&Extensions::colorBufferHalfFloat);
         map["GL_OES_texture_half_float"] = esOnlyExtension(&Extensions::textureHalfFloat);
         map["GL_OES_texture_half_float_linear"] = esOnlyExtension(&Extensions::textureHalfFloatLinear);
@@ -570,67 +569,65 @@ const ExtensionInfoMap &GetExtensionInfoMap()
         map["GL_OES_texture_float_linear"] = esOnlyExtension(&Extensions::textureFloatLinear);
         map["GL_EXT_texture_rg"] = esOnlyExtension(&Extensions::textureRG);
         map["GL_EXT_texture_compression_dxt1"] = esOnlyExtension(&Extensions::textureCompressionDXT1);
-//        map["GL_ANGLE_texture_compression_dxt3"] = esOnlyExtension(&Extensions::textureCompressionDXT3);
-//        map["GL_ANGLE_texture_compression_dxt5"] = esOnlyExtension(&Extensions::textureCompressionDXT5);
+        map["GL_ANGLE_texture_compression_dxt3"] = esOnlyExtension(&Extensions::textureCompressionDXT3);
+        map["GL_ANGLE_texture_compression_dxt5"] = esOnlyExtension(&Extensions::textureCompressionDXT5);
         map["GL_KHR_texture_compression_astc_hdr"] = esOnlyExtension(&Extensions::textureCompressionASTCHDR);
         map["GL_KHR_texture_compression_astc_ldr"] = esOnlyExtension(&Extensions::textureCompressionASTCLDR);
         map["GL_OES_compressed_ETC1_RGB8_texture"] = esOnlyExtension(&Extensions::compressedETC1RGB8Texture);
         map["GL_EXT_sRGB"] = esOnlyExtension(&Extensions::sRGB);
-//        map["GL_ANGLE_depth_texture"] = esOnlyExtension(&Extensions::depthTextures);
+        map["GL_ANGLE_depth_texture"] = esOnlyExtension(&Extensions::depthTextures);
         map["GL_OES_depth32"] = esOnlyExtension(&Extensions::depth32);
-//        map["GL_EXT_texture_storage"] = esOnlyExtension(&Extensions::textureStorage);
-//        map["GL_OES_texture_npot"] = esOnlyExtension(&Extensions::textureNPOT);
+        map["GL_EXT_texture_storage"] = esOnlyExtension(&Extensions::textureStorage);
+        map["GL_OES_texture_npot"] = esOnlyExtension(&Extensions::textureNPOT);
         map["GL_EXT_draw_buffers"] = esOnlyExtension(&Extensions::drawBuffers);
         map["GL_EXT_texture_filter_anisotropic"] = esOnlyExtension(&Extensions::textureFilterAnisotropic);
         map["GL_EXT_occlusion_query_boolean"] = esOnlyExtension(&Extensions::occlusionQueryBoolean);
         map["GL_NV_fence"] = esOnlyExtension(&Extensions::fence);
-//        map["GL_ANGLE_timer_query"] = esOnlyExtension(&Extensions::timerQuery);
+        map["GL_ANGLE_timer_query"] = esOnlyExtension(&Extensions::timerQuery);
         map["GL_EXT_disjoint_timer_query"] = esOnlyExtension(&Extensions::disjointTimerQuery);
-//        map["GL_EXT_robustness"] = esOnlyExtension(&Extensions::robustness);
+        map["GL_EXT_robustness"] = esOnlyExtension(&Extensions::robustness);
         map["GL_EXT_blend_minmax"] = esOnlyExtension(&Extensions::blendMinMax);
-//        map["GL_ANGLE_framebuffer_blit"] = esOnlyExtension(&Extensions::framebufferBlit);
-//        map["GL_ANGLE_framebuffer_multisample"] = esOnlyExtension(&Extensions::framebufferMultisample);
-//        map["GL_ANGLE_instanced_arrays"] = esOnlyExtension(&Extensions::instancedArrays);
-//        map["GL_ANGLE_pack_reverse_row_order"] = esOnlyExtension(&Extensions::packReverseRowOrder);
+        map["GL_ANGLE_framebuffer_blit"] = esOnlyExtension(&Extensions::framebufferBlit);
+        map["GL_ANGLE_framebuffer_multisample"] = esOnlyExtension(&Extensions::framebufferMultisample);
+        map["GL_ANGLE_instanced_arrays"] = esOnlyExtension(&Extensions::instancedArrays);
+        map["GL_ANGLE_pack_reverse_row_order"] = esOnlyExtension(&Extensions::packReverseRowOrder);
         map["GL_OES_standard_derivatives"] = esOnlyExtension(&Extensions::standardDerivatives);
         map["GL_EXT_shader_texture_lod"] = esOnlyExtension(&Extensions::shaderTextureLOD);
         map["GL_NV_shader_framebuffer_fetch"] = esOnlyExtension(&Extensions::NVshaderFramebufferFetch);
         map["GL_ARM_shader_framebuffer_fetch"] = esOnlyExtension(&Extensions::ARMshaderFramebufferFetch);
         map["GL_EXT_shader_framebuffer_fetch"] = esOnlyExtension(&Extensions::shaderFramebufferFetch);
         map["GL_EXT_frag_depth"] = esOnlyExtension(&Extensions::fragDepth);
-//        map["GL_ANGLE_texture_usage"] = esOnlyExtension(&Extensions::textureUsage);
-//        map["GL_ANGLE_translated_shader_source"] = esOnlyExtension(&Extensions::translatedShaderSource);
+        map["GL_ANGLE_texture_usage"] = esOnlyExtension(&Extensions::textureUsage);
+        map["GL_ANGLE_translated_shader_source"] = esOnlyExtension(&Extensions::translatedShaderSource);
         map["GL_OES_fbo_render_mipmap"] = esOnlyExtension(&Extensions::fboRenderMipmap);
         map["GL_EXT_discard_framebuffer"] = esOnlyExtension(&Extensions::discardFramebuffer);
         map["GL_EXT_debug_marker"] = esOnlyExtension(&Extensions::debugMarker);
         map["GL_OES_EGL_image"] = esOnlyExtension(&Extensions::eglImage);
         map["GL_OES_EGL_image_external"] = esOnlyExtension(&Extensions::eglImageExternal);
         map["GL_OES_EGL_image_external_essl3"] = esOnlyExtension(&Extensions::eglImageExternalEssl3);
-//        map["GL_NV_EGL_stream_consumer_external"] = esOnlyExtension(&Extensions::eglStreamConsumerExternal);
-//     /* GL_UNPACK_ROW_LENGTH is defined in this extension, emulator encoder does not handle. */
-//       map["GL_EXT_unpack_subimage"] = esOnlyExtension(&Extensions::unpackSubimage);
-//       map["GL_NV_pack_subimage"] = esOnlyExtension(&Extensions::packSubimage);
-//     /* 3.0 required */
-//        map["GL_EXT_color_buffer_float"] = esOnlyExtension(&Extensions::colorBufferFloat);
-//        map["GL_OES_vertex_array_object"] = esOnlyExtension(&Extensions::vertexArrayObject);
+        map["GL_NV_EGL_stream_consumer_external"] = esOnlyExtension(&Extensions::eglStreamConsumerExternal);
+        map["GL_EXT_unpack_subimage"] = esOnlyExtension(&Extensions::unpackSubimage);
+        map["GL_NV_pack_subimage"] = esOnlyExtension(&Extensions::packSubimage);
+        map["GL_EXT_color_buffer_float"] = esOnlyExtension(&Extensions::colorBufferFloat);
+        map["GL_OES_vertex_array_object"] = esOnlyExtension(&Extensions::vertexArrayObject);
         map["GL_KHR_debug"] = esOnlyExtension(&Extensions::debug);
         // TODO(jmadill): Enable this when complete.
         //map["GL_KHR_no_error"] = esOnlyExtension(&Extensions::noError);
-//        map["GL_ANGLE_lossy_etc_decode"] = esOnlyExtension(&Extensions::lossyETCDecode);
-//        map["GL_CHROMIUM_bind_uniform_location"] = esOnlyExtension(&Extensions::bindUniformLocation);
-//        map["GL_CHROMIUM_sync_query"] = esOnlyExtension(&Extensions::syncQuery);
-//        map["GL_CHROMIUM_copy_texture"] = esOnlyExtension(&Extensions::copyTexture);
-//        map["GL_CHROMIUM_copy_compressed_texture"] = esOnlyExtension(&Extensions::copyCompressedTexture);
-//        map["GL_ANGLE_webgl_compatibility"] = esOnlyExtension(&Extensions::webglCompatibility);
-//        map["GL_ANGLE_request_extension"] = esOnlyExtension(&Extensions::requestExtension);
-//        map["GL_CHROMIUM_bind_generates_resource"] = esOnlyExtension(&Extensions::bindGeneratesResource);
-//        map["GL_ANGLE_robust_client_memory"] = esOnlyExtension(&Extensions::robustClientMemory);
+        map["GL_ANGLE_lossy_etc_decode"] = esOnlyExtension(&Extensions::lossyETCDecode);
+        map["GL_CHROMIUM_bind_uniform_location"] = esOnlyExtension(&Extensions::bindUniformLocation);
+        map["GL_CHROMIUM_sync_query"] = esOnlyExtension(&Extensions::syncQuery);
+        map["GL_CHROMIUM_copy_texture"] = esOnlyExtension(&Extensions::copyTexture);
+        map["GL_CHROMIUM_copy_compressed_texture"] = esOnlyExtension(&Extensions::copyCompressedTexture);
+        map["GL_ANGLE_webgl_compatibility"] = esOnlyExtension(&Extensions::webglCompatibility);
+        map["GL_ANGLE_request_extension"] = esOnlyExtension(&Extensions::requestExtension);
+        map["GL_CHROMIUM_bind_generates_resource"] = esOnlyExtension(&Extensions::bindGeneratesResource);
+        map["GL_ANGLE_robust_client_memory"] = esOnlyExtension(&Extensions::robustClientMemory);
         map["GL_EXT_texture_sRGB_decode"] = esOnlyExtension(&Extensions::textureSRGBDecode);
         map["GL_EXT_sRGB_write_control"] = esOnlyExtension(&Extensions::sRGBWriteControl);
-//        map["GL_EXT_multisample_compatibility"] = esOnlyExtension(&Extensions::multisampleCompatibility);
-//        map["GL_CHROMIUM_framebuffer_mixed_samples"] = esOnlyExtension(&Extensions::framebufferMixedSamples);
-//        map["GL_EXT_texture_norm16"] = esOnlyExtension(&Extensions::textureNorm16);
-//        map["GL_CHROMIUM_path_rendering"] = esOnlyExtension(&Extensions::pathRendering);
+        map["GL_EXT_multisample_compatibility"] = esOnlyExtension(&Extensions::multisampleCompatibility);
+        map["GL_CHROMIUM_framebuffer_mixed_samples"] = esOnlyExtension(&Extensions::framebufferMixedSamples);
+        map["GL_EXT_texture_norm16"] = esOnlyExtension(&Extensions::textureNorm16);
+        map["GL_CHROMIUM_path_rendering"] = esOnlyExtension(&Extensions::pathRendering);
         // clang-format on
 
         return map;
@@ -1026,8 +1023,7 @@ std::vector<std::string> DisplayExtensions::getStrings() const
 
     // clang-format off
     //                   | Extension name                                       | Supported flag                    | Output vector   |
-	// Emulator does not support the EGL extension yet
-//	InsertExtensionString("EGL_EXT_create_context_robustness",                   createContextRobustness,            &extensionStrings);
+    InsertExtensionString("EGL_EXT_create_context_robustness",                   createContextRobustness,            &extensionStrings);
     InsertExtensionString("EGL_ANGLE_d3d_share_handle_client_buffer",            d3dShareHandleClientBuffer,         &extensionStrings);
     InsertExtensionString("EGL_ANGLE_d3d_texture_client_buffer",                 d3dTextureClientBuffer,             &extensionStrings);
     InsertExtensionString("EGL_ANGLE_surface_d3d_texture_2d_share_handle",       surfaceD3DTexture2DShareHandle,     &extensionStrings);
@@ -1037,19 +1033,19 @@ std::vector<std::string> DisplayExtensions::getStrings() const
     InsertExtensionString("EGL_ANGLE_surface_orientation",                       surfaceOrientation,                 &extensionStrings);
     InsertExtensionString("EGL_ANGLE_direct_composition",                        directComposition,                  &extensionStrings);
     InsertExtensionString("EGL_NV_post_sub_buffer",                              postSubBuffer,                      &extensionStrings);
-//    InsertExtensionString("EGL_KHR_create_context",                              createContext,                      &extensionStrings);
+    InsertExtensionString("EGL_KHR_create_context",                              createContext,                      &extensionStrings);
     InsertExtensionString("EGL_EXT_device_query",                                deviceQuery,                        &extensionStrings);
     InsertExtensionString("EGL_KHR_image",                                       image,                              &extensionStrings);
     InsertExtensionString("EGL_KHR_image_base",                                  imageBase,                          &extensionStrings);
-//    InsertExtensionString("EGL_KHR_image_pixmap",                                imagePixmap,                        &extensionStrings);
+    InsertExtensionString("EGL_KHR_image_pixmap",                                imagePixmap,                        &extensionStrings);
     InsertExtensionString("EGL_KHR_gl_texture_2D_image",                         glTexture2DImage,                   &extensionStrings);
-//    InsertExtensionString("EGL_KHR_gl_texture_cubemap_image",                    glTextureCubemapImage,              &extensionStrings);
-//    InsertExtensionString("EGL_KHR_gl_texture_3D_image",                         glTexture3DImage,                   &extensionStrings);
-//    InsertExtensionString("EGL_KHR_gl_renderbuffer_image",                       glRenderbufferImage,                &extensionStrings);
+    InsertExtensionString("EGL_KHR_gl_texture_cubemap_image",                    glTextureCubemapImage,              &extensionStrings);
+    InsertExtensionString("EGL_KHR_gl_texture_3D_image",                         glTexture3DImage,                   &extensionStrings);
+    InsertExtensionString("EGL_KHR_gl_renderbuffer_image",                       glRenderbufferImage,                &extensionStrings);
     InsertExtensionString("EGL_KHR_get_all_proc_addresses",                      getAllProcAddresses,                &extensionStrings);
-//    InsertExtensionString("EGL_KHR_stream",                                      stream,                             &extensionStrings);
-//    InsertExtensionString("EGL_KHR_stream_consumer_gltexture",                   streamConsumerGLTexture,            &extensionStrings);
-//    InsertExtensionString("EGL_NV_stream_consumer_gltexture_yuv",                streamConsumerGLTextureYUV,         &extensionStrings);
+    InsertExtensionString("EGL_KHR_stream",                                      stream,                             &extensionStrings);
+    InsertExtensionString("EGL_KHR_stream_consumer_gltexture",                   streamConsumerGLTexture,            &extensionStrings);
+    InsertExtensionString("EGL_NV_stream_consumer_gltexture_yuv",                streamConsumerGLTextureYUV,         &extensionStrings);
     InsertExtensionString("EGL_ANGLE_flexible_surface_compatibility",            flexibleSurfaceCompatibility,       &extensionStrings);
     InsertExtensionString("EGL_ANGLE_stream_producer_d3d_texture_nv12",          streamProducerD3DTextureNV12,       &extensionStrings);
     InsertExtensionString("EGL_ANGLE_create_context_webgl_compatibility",        createContextWebGLCompatibility,    &extensionStrings);
diff --git a/src/libANGLE/Config.cpp b/src/libANGLE/Config.cpp
index 218910d46..822518ef6 100644
--- a/src/libANGLE/Config.cpp
+++ b/src/libANGLE/Config.cpp
@@ -58,8 +58,7 @@ Config::Config()
       transparentRedValue(0),
       transparentGreenValue(0),
       transparentBlueValue(0),
-      optimalOrientation(0),
-      frameBufferTargetAndroid(1)
+      optimalOrientation(0)
 {
 }
 
@@ -233,7 +232,6 @@ std::vector<const Config*> ConfigSet::filter(const AttributeMap &attributeMap) c
               case EGL_LEVEL:                     match = config.level >= attributeValue;                             break;
               case EGL_NATIVE_RENDERABLE:         match = config.nativeRenderable == (EGLBoolean)attributeValue;      break;
               case EGL_NATIVE_VISUAL_TYPE:        match = config.nativeVisualType == attributeValue;                  break;
-              case EGL_NATIVE_VISUAL_ID:                                                                              break;
               case EGL_SAMPLES:                   match = config.samples >= attributeValue;                           break;
               case EGL_SAMPLE_BUFFERS:            match = config.sampleBuffers >= attributeValue;                     break;
               case EGL_SURFACE_TYPE:              match = (config.surfaceType & attributeValue) == attributeValue;    break;
@@ -257,8 +255,6 @@ std::vector<const Config*> ConfigSet::filter(const AttributeMap &attributeMap) c
               case EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE:
                   match = config.optimalOrientation == attributeValue;
                   break;
-              case EGL_RECORDABLE_ANDROID:                                                                            break;
-              case EGL_FRAMEBUFFER_TARGET_ANDROID:match = config.frameBufferTargetAndroid == attributeValue;          break;
               default: UNREACHABLE();
             }
 
diff --git a/src/libANGLE/Config.h b/src/libANGLE/Config.h
index b4a8d94f0..00f5673b5 100644
--- a/src/libANGLE/Config.h
+++ b/src/libANGLE/Config.h
@@ -65,7 +65,6 @@ struct Config
     EGLint transparentGreenValue;   // Transparent green value
     EGLint transparentBlueValue;    // Transparent blue value
     EGLint optimalOrientation;      // Optimal window surface orientation
-    EGLint frameBufferTargetAndroid;// Android target framebuffer
 };
 
 class ConfigSet
diff --git a/src/libANGLE/Context.cpp b/src/libANGLE/Context.cpp
index 6137e057f..893b81816 100644
--- a/src/libANGLE/Context.cpp
+++ b/src/libANGLE/Context.cpp
@@ -2290,10 +2290,6 @@ void Context::initExtensionStrings()
     {
         mExtensionStrings.push_back(MakeStaticString(extensionString));
     }
-
-	//emulator, add GL_OES_depth_texture
-	mExtensionStrings.push_back("GL_OES_depth_texture");
-
     mExtensionString = mergeExtensionStrings(mExtensionStrings);
 
     mRequestableExtensionStrings.clear();
diff --git a/src/libANGLE/Display.cpp b/src/libANGLE/Display.cpp
index d34477278..39851f9f8 100644
--- a/src/libANGLE/Display.cpp
+++ b/src/libANGLE/Display.cpp
@@ -149,7 +149,6 @@ rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
       case EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE:
 #if defined(ANGLE_ENABLE_D3D9) || defined(ANGLE_ENABLE_D3D11)
         // Default to D3D displays
-        fprintf(stderr, "ANGLE: %s: make D3D display\n", __FUNCTION__);
         impl = new rx::DisplayD3D();
 #elif defined(ANGLE_USE_X11)
         impl = new rx::DisplayGLX();
@@ -178,7 +177,6 @@ rx::DisplayImpl *CreateDisplayFromAttribs(const AttributeMap &attribMap)
       case EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE:
 #if defined(ANGLE_ENABLE_OPENGL)
 #if defined(ANGLE_PLATFORM_WINDOWS)
-        fprintf(stderr, "ANGLE: %s: make WGL display\n", __FUNCTION__);
         impl = new rx::DisplayWGL();
 #elif defined(ANGLE_USE_X11)
         impl = new rx::DisplayGLX();
@@ -539,8 +537,7 @@ bool Display::getConfigAttrib(const Config *configuration, EGLint attribute, EGL
           }
           *value = configuration->optimalOrientation;
           break;
-      case EGL_RECORDABLE_ANDROID:         break;
-      case EGL_FRAMEBUFFER_TARGET_ANDROID: *value = configuration->frameBufferTargetAndroid; break;
+
       default:
         return false;
     }
@@ -936,7 +933,7 @@ void Display::initDisplayExtensions()
     mDisplayExtensions = mImplementation->getExtensions();
 
     // Some extensions are always available because they are implemented in the EGL layer.
-	mDisplayExtensions.createContext        = true;
+    mDisplayExtensions.createContext        = true;
     mDisplayExtensions.createContextNoError = true;
     mDisplayExtensions.createContextWebGLCompatibility = true;
     mDisplayExtensions.createContextBindGeneratesResource = true;
diff --git a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
index 1f643db47..7998b2278 100644
--- a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
@@ -924,11 +924,10 @@ void Renderer11::populateRenderer11DeviceCaps()
 
 egl::ConfigSet Renderer11::generateConfigs()
 {
-    fprintf(stderr, "ANGLE: D3D11: %s\n", __FUNCTION__);
     std::vector<GLenum> colorBufferFormats;
 
     // 32-bit supported formats
-//    colorBufferFormats.push_back(GL_BGRA8_EXT);
+    colorBufferFormats.push_back(GL_BGRA8_EXT);
     colorBufferFormats.push_back(GL_RGBA8_OES);
 
     // 24-bit supported formats
@@ -3033,8 +3032,7 @@ gl::Error Renderer11::copyImage2D(const gl::Framebuffer *framebuffer,
                                   TextureStorage *storage,
                                   GLint level)
 {
-    //TextureStorage11_2D *storage11 = GetAs<TextureStorage11_2D>(storage);
-    TextureStorage11 *storage11 = GetAs<TextureStorage11>(storage);
+    TextureStorage11_2D *storage11 = GetAs<TextureStorage11_2D>(storage);
     ASSERT(storage11);
 
     gl::ImageIndex index              = gl::ImageIndex::Make2D(level);
diff --git a/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp b/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
index c06c3d9d4..7ba0680d1 100644
--- a/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
+++ b/src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp
@@ -398,11 +398,8 @@ D3DPRESENT_PARAMETERS Renderer9::getDefaultPresentParameters()
 
 egl::ConfigSet Renderer9::generateConfigs()
 {
-    fprintf(stderr, "ANGLE: D3D9: %s\n", __FUNCTION__);
     static const GLenum colorBufferFormats[] =
     {
-        GL_RGBA8,
-        GL_RGB8,
         GL_BGR5_A1_ANGLEX,
         GL_BGRA8_EXT,
         GL_RGB565,
@@ -419,7 +416,7 @@ egl::ConfigSet Renderer9::generateConfigs()
     };
 
     const gl::Caps &rendererCaps                  = getNativeCaps();
-	const gl::TextureCapsMap &rendererTextureCaps = getNativeTextureCaps();
+    const gl::TextureCapsMap &rendererTextureCaps = getNativeTextureCaps();
 
     D3DDISPLAYMODE currentDisplayMode;
     mD3d9->GetAdapterDisplayMode(mAdapter, &currentDisplayMode);
@@ -481,16 +478,11 @@ egl::ConfigSet Renderer9::generateConfigs()
                     config.luminanceSize = colorBufferFormatInfo.luminanceBits;
                     config.alphaSize = colorBufferFormatInfo.alphaBits;
                     config.alphaMaskSize = 0;
-                    fprintf(stderr, "sizes: R %d G %d B %d A %d\n", config.redSize, config.greenSize, config.blueSize, config.alphaSize);
                     config.bindToTextureRGB = (colorBufferFormatInfo.format == GL_RGB);
                     config.bindToTextureRGBA = (colorBufferFormatInfo.format == GL_RGBA || colorBufferFormatInfo.format == GL_BGRA_EXT);
-                    fprintf(stderr, "bindToTextureRGB=%d, bindToTextureRGBA=%d\n", config.bindToTextureRGB, config.bindToTextureRGBA);
                     config.colorBufferType = EGL_RGB_BUFFER;
                     // Mark as slow if blits to the back-buffer won't be straight forward
-                    // HACK: For emulator, don't do this or hwui will complain
-                    //config.configCaveat = (currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat) ? EGL_NONE : EGL_SLOW_CONFIG;
-                    config.configCaveat = EGL_NONE;
-                    fprintf(stderr, "ANGLE: D3D9: EGL_FAST_CONFIG? %d (marking config caveat as EGL_NONE anyway :} )\n", currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat);
+                    config.configCaveat = (currentDisplayMode.Format == d3d9ColorBufferFormatInfo.renderFormat) ? EGL_NONE : EGL_SLOW_CONFIG;
                     config.configID = static_cast<EGLint>(configs.size() + 1);
                     config.conformant = EGL_OPENGL_ES2_BIT;
                     config.depthSize = depthStencilBufferFormatInfo.depthBits;
@@ -526,8 +518,7 @@ egl::ConfigSet Renderer9::generateConfigs()
 
 void Renderer9::generateDisplayExtensions(egl::DisplayExtensions *outExtensions) const
 {
-    //outExtensions->createContextRobustness = true;
-    outExtensions->createContextRobustness = false;
+    outExtensions->createContextRobustness = true;
 
     if (getShareHandleSupport())
     {
diff --git a/src/libANGLE/validationES2.cpp b/src/libANGLE/validationES2.cpp
index bb5dd06fe..943a73ebf 100644
--- a/src/libANGLE/validationES2.cpp
+++ b/src/libANGLE/validationES2.cpp
@@ -811,8 +811,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
             case GL_LUMINANCE_ALPHA:
             case GL_RGBA:
                 if (colorbufferFormat != GL_RGBA4 && colorbufferFormat != GL_RGB5_A1 &&
-                    colorbufferFormat != GL_RGBA8_OES && colorbufferFormat != GL_RGBA32F &&
-                    colorbufferFormat != GL_RGB8_OES) // this works in the emulator
+                    colorbufferFormat != GL_RGBA8_OES && colorbufferFormat != GL_RGBA32F)
                 {
                     context->handleError(Error(GL_INVALID_OPERATION));
                     return false;
@@ -900,8 +899,7 @@ bool ValidateES2CopyTexImageParameters(ValidationContext *context,
             case GL_RGBA:
                 if (colorbufferFormat != GL_RGBA4 && colorbufferFormat != GL_RGB5_A1 &&
                     colorbufferFormat != GL_BGRA8_EXT && colorbufferFormat != GL_RGBA8_OES &&
-                    colorbufferFormat != GL_BGR5_A1_ANGLEX &&
-                    colorbufferFormat != GL_RGB8_OES) // this works in the emulator
+                    colorbufferFormat != GL_BGR5_A1_ANGLEX)
                 {
                     context->handleError(Error(GL_INVALID_OPERATION));
                     return false;
diff --git a/src/libGLESv2/entry_points_egl.cpp b/src/libGLESv2/entry_points_egl.cpp
index 28db3f935..0a6218f30 100644
--- a/src/libGLESv2/entry_points_egl.cpp
+++ b/src/libGLESv2/entry_points_egl.cpp
@@ -28,15 +28,13 @@
 
 #include <EGL/eglext.h>
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace egl
 {
 
 // EGL 1.0
 EGLint EGLAPIENTRY GetError(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     EGLint error = thread->getError();
@@ -46,14 +44,14 @@ EGLint EGLAPIENTRY GetError(void)
 
 EGLDisplay EGLAPIENTRY GetDisplay(EGLNativeDisplayType display_id)
 {
-     EVENT_API_LOCK1("(EGLNativeDisplayType display_id = 0x%0.8p)", display_id);
+    EVENT("(EGLNativeDisplayType display_id = 0x%0.8p)", display_id);
 
     return Display::GetDisplayFromAttribs(reinterpret_cast<void *>(display_id), AttributeMap());
 }
 
 EGLBoolean EGLAPIENTRY Initialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLint *major = 0x%0.8p, EGLint *minor = 0x%0.8p)", dpy,
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLint *major = 0x%0.8p, EGLint *minor = 0x%0.8p)", dpy,
           major, minor);
     Thread *thread = GetCurrentThread();
 
@@ -80,7 +78,7 @@ EGLBoolean EGLAPIENTRY Initialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
 
 EGLBoolean EGLAPIENTRY Terminate(EGLDisplay dpy)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p)", dpy);
+    EVENT("(EGLDisplay dpy = 0x%0.8p)", dpy);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display *>(dpy);
@@ -103,7 +101,7 @@ EGLBoolean EGLAPIENTRY Terminate(EGLDisplay dpy)
 
 const char *EGLAPIENTRY QueryString(EGLDisplay dpy, EGLint name)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLint name = %d)", dpy, name);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLint name = %d)", dpy, name);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -130,7 +128,7 @@ const char *EGLAPIENTRY QueryString(EGLDisplay dpy, EGLint name)
         }
         else
         {
-           result = display->getExtensionString().c_str();
+            result = display->getExtensionString().c_str();
         }
         break;
       case EGL_VENDOR:
@@ -150,7 +148,7 @@ const char *EGLAPIENTRY QueryString(EGLDisplay dpy, EGLint name)
 
 EGLBoolean EGLAPIENTRY GetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLConfig *configs = 0x%0.8p, "
         "EGLint config_size = %d, EGLint *num_config = 0x%0.8p)",
         dpy, configs, config_size, num_config);
@@ -188,7 +186,7 @@ EGLBoolean EGLAPIENTRY GetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint con
 
 EGLBoolean EGLAPIENTRY ChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p, "
         "EGLConfig *configs = 0x%0.8p, EGLint config_size = %d, EGLint *num_config = 0x%0.8p)",
         dpy, attrib_list, configs, config_size, num_config);
@@ -227,7 +225,7 @@ EGLBoolean EGLAPIENTRY ChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, E
 
 EGLBoolean EGLAPIENTRY GetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLint attribute = %d, EGLint "
         "*value = 0x%0.8p)",
         dpy, config, attribute, value);
@@ -255,7 +253,7 @@ EGLBoolean EGLAPIENTRY GetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint
 
 EGLSurface EGLAPIENTRY CreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativeWindowType win = 0x%0.8p, "
         "const EGLint *attrib_list = 0x%0.8p)",
         dpy, config, win, attrib_list);
@@ -285,7 +283,7 @@ EGLSurface EGLAPIENTRY CreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGL
 
 EGLSurface EGLAPIENTRY CreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, const EGLint *attrib_list = "
         "0x%0.8p)",
         dpy, config, attrib_list);
@@ -315,7 +313,7 @@ EGLSurface EGLAPIENTRY CreatePbufferSurface(EGLDisplay dpy, EGLConfig config, co
 
 EGLSurface EGLAPIENTRY CreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativePixmapType pixmap = 0x%0.8p, "
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativePixmapType pixmap = 0x%0.8p, "
           "const EGLint *attrib_list = 0x%0.8p)", dpy, config, pixmap, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -337,7 +335,7 @@ EGLSurface EGLAPIENTRY CreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGL
 
 EGLBoolean EGLAPIENTRY DestroySurface(EGLDisplay dpy, EGLSurface surface)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)", dpy, surface);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)", dpy, surface);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -364,7 +362,7 @@ EGLBoolean EGLAPIENTRY DestroySurface(EGLDisplay dpy, EGLSurface surface)
 
 EGLBoolean EGLAPIENTRY QuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)",
           dpy, surface, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -492,7 +490,7 @@ EGLBoolean EGLAPIENTRY QuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint a
 
 EGLContext EGLAPIENTRY CreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLContext share_context = 0x%0.8p, "
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLContext share_context = 0x%0.8p, "
           "const EGLint *attrib_list = 0x%0.8p)", dpy, config, share_context, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -522,7 +520,7 @@ EGLContext EGLAPIENTRY CreateContext(EGLDisplay dpy, EGLConfig config, EGLContex
 
 EGLBoolean EGLAPIENTRY DestroyContext(EGLDisplay dpy, EGLContext ctx)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p)", dpy, ctx);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p)", dpy, ctx);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -554,7 +552,7 @@ EGLBoolean EGLAPIENTRY DestroyContext(EGLDisplay dpy, EGLContext ctx)
 
 EGLBoolean EGLAPIENTRY MakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
 {
-    EVENT_API_LOCK("(EGLDisplay dpy = 0x%0.8p, EGLSurface draw = 0x%0.8p, EGLSurface read = 0x%0.8p, EGLContext ctx = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface draw = 0x%0.8p, EGLSurface read = 0x%0.8p, EGLContext ctx = 0x%0.8p)",
           dpy, draw, read, ctx);
     Thread *thread = GetCurrentThread();
 
@@ -674,145 +672,6 @@ EGLBoolean EGLAPIENTRY MakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface r
     gl::Context *previousContext = thread->getContext();
     thread->setCurrent(display, drawSurface, readSurface, context);
 
-    setCurContext(context);
-    setCurDrawSurface(drawSurface);
-    setCurReadSurface(readSurface);
-
-    // Release the surface from the previously-current context, to allow
-    // destroyed surfaces to delete themselves.
-    if (previousContext != nullptr && context != previousContext)
-    {
-        previousContext->releaseSurface();
-    }
-
-    thread->setError(Error(EGL_SUCCESS));
-    return EGL_TRUE;
-}
-
-EGLBoolean EGLAPIENTRY MakeCurrent_nolock(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
-{
-    Thread *thread = GetCurrentThread();
-
-    Display *display = static_cast<Display*>(dpy);
-    gl::Context *context = static_cast<gl::Context*>(ctx);
-
-    // If ctx is EGL_NO_CONTEXT and either draw or read are not EGL_NO_SURFACE, an EGL_BAD_MATCH
-    // error is generated.
-    if (ctx == EGL_NO_CONTEXT && (draw != EGL_NO_SURFACE || read != EGL_NO_SURFACE))
-    {
-        thread->setError(Error(EGL_BAD_MATCH));
-        return EGL_FALSE;
-    }
-
-    if (ctx != EGL_NO_CONTEXT && draw == EGL_NO_SURFACE && read == EGL_NO_SURFACE)
-    {
-        thread->setError(Error(EGL_BAD_MATCH));
-        return EGL_FALSE;
-    }
-
-    // If either of draw or read is a valid surface and the other is EGL_NO_SURFACE, an
-    // EGL_BAD_MATCH error is generated.
-    if ((read == EGL_NO_SURFACE) != (draw == EGL_NO_SURFACE))
-    {
-        thread->setError(Error(
-            EGL_BAD_MATCH, "read and draw must both be valid surfaces, or both be EGL_NO_SURFACE"));
-        return EGL_FALSE;
-    }
-
-    if (dpy == EGL_NO_DISPLAY || !Display::isValidDisplay(display))
-    {
-        thread->setError(Error(EGL_BAD_DISPLAY, "'dpy' not a valid EGLDisplay handle"));
-        return EGL_FALSE;
-    }
-
-    // EGL 1.5 spec: dpy can be uninitialized if all other parameters are null
-    if (!display->isInitialized() && (ctx != EGL_NO_CONTEXT || draw != EGL_NO_SURFACE || read != EGL_NO_SURFACE))
-    {
-        thread->setError(Error(EGL_NOT_INITIALIZED, "'dpy' not initialized"));
-        return EGL_FALSE;
-    }
-
-    if (ctx != EGL_NO_CONTEXT)
-    {
-        Error error = ValidateContext(display, context);
-        if (error.isError())
-        {
-            thread->setError(error);
-            return EGL_FALSE;
-        }
-    }
-
-    if (display->isInitialized() && display->testDeviceLost())
-    {
-        thread->setError(Error(EGL_CONTEXT_LOST));
-        return EGL_FALSE;
-    }
-
-    Surface *drawSurface = static_cast<Surface*>(draw);
-    if (draw != EGL_NO_SURFACE)
-    {
-        Error error = ValidateSurface(display, drawSurface);
-        if (error.isError())
-        {
-            thread->setError(error);
-            return EGL_FALSE;
-        }
-    }
-
-    Surface *readSurface = static_cast<Surface*>(read);
-    if (read != EGL_NO_SURFACE)
-    {
-        Error error = ValidateSurface(display, readSurface);
-        if (error.isError())
-        {
-            thread->setError(error);
-            return EGL_FALSE;
-        }
-    }
-
-    if (readSurface)
-    {
-        Error readCompatError =
-            ValidateCompatibleConfigs(display, readSurface->getConfig(), readSurface,
-                                      context->getConfig(), readSurface->getType());
-        if (readCompatError.isError())
-        {
-            thread->setError(readCompatError);
-            return EGL_FALSE;
-        }
-    }
-
-    if (draw != read)
-    {
-        UNIMPLEMENTED();   // FIXME
-
-        if (drawSurface)
-        {
-            Error drawCompatError =
-                ValidateCompatibleConfigs(display, drawSurface->getConfig(), drawSurface,
-                                          context->getConfig(), drawSurface->getType());
-            if (drawCompatError.isError())
-            {
-                thread->setError(drawCompatError);
-                return EGL_FALSE;
-            }
-        }
-    }
-
-    Error makeCurrentError = display->makeCurrent(drawSurface, readSurface, context);
-    if (makeCurrentError.isError())
-    {
-        thread->setError(makeCurrentError);
-        return EGL_FALSE;
-    }
-
-    gl::Context *previousContext = thread->getContext();
-    thread->setCurrent(display, drawSurface, readSurface, context);
-
-    setCurContext(context);
-    setCurDrawSurface(drawSurface);
-    setCurReadSurface(readSurface);
-
     // Release the surface from the previously-current context, to allow
     // destroyed surfaces to delete themselves.
     if (previousContext != nullptr && context != previousContext)
@@ -826,7 +685,7 @@ EGLBoolean EGLAPIENTRY MakeCurrent_nolock(EGLDisplay dpy, EGLSurface draw, EGLSu
 
 EGLSurface EGLAPIENTRY GetCurrentSurface(EGLint readdraw)
 {
-    EVENT_API_LOCK1("(EGLint readdraw = %d)", readdraw);
+    EVENT("(EGLint readdraw = %d)", readdraw);
     Thread *thread = GetCurrentThread();
 
     if (readdraw == EGL_READ)
@@ -848,7 +707,7 @@ EGLSurface EGLAPIENTRY GetCurrentSurface(EGLint readdraw)
 
 EGLDisplay EGLAPIENTRY GetCurrentDisplay(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     EGLDisplay dpy = thread->getDisplay();
@@ -859,7 +718,7 @@ EGLDisplay EGLAPIENTRY GetCurrentDisplay(void)
 
 EGLBoolean EGLAPIENTRY QueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)",
           dpy, ctx, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -898,7 +757,7 @@ EGLBoolean EGLAPIENTRY QueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attri
 
 EGLBoolean EGLAPIENTRY WaitGL(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     Display *display = thread->getDisplay();
@@ -925,7 +784,7 @@ EGLBoolean EGLAPIENTRY WaitGL(void)
 
 EGLBoolean EGLAPIENTRY WaitNative(EGLint engine)
 {
-     EVENT_API_LOCK1("(EGLint engine = %d)", engine);
+    EVENT("(EGLint engine = %d)", engine);
     Thread *thread = GetCurrentThread();
 
     Display *display = thread->getDisplay();
@@ -956,7 +815,7 @@ EGLBoolean EGLAPIENTRY WaitNative(EGLint engine)
 
 EGLBoolean EGLAPIENTRY SwapBuffers(EGLDisplay dpy, EGLSurface surface)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)", dpy, surface);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)", dpy, surface);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -994,7 +853,7 @@ EGLBoolean EGLAPIENTRY SwapBuffers(EGLDisplay dpy, EGLSurface surface)
 
 EGLBoolean EGLAPIENTRY CopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLNativePixmapType target = 0x%0.8p)", dpy, surface, target);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLNativePixmapType target = 0x%0.8p)", dpy, surface, target);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -1022,7 +881,7 @@ EGLBoolean EGLAPIENTRY CopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNative
 // EGL 1.1
 EGLBoolean EGLAPIENTRY BindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)", dpy, surface, buffer);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)", dpy, surface, buffer);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -1085,7 +944,7 @@ EGLBoolean EGLAPIENTRY BindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint b
 
 EGLBoolean EGLAPIENTRY SurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint value = %d)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint value = %d)",
         dpy, surface, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -1107,7 +966,7 @@ EGLBoolean EGLAPIENTRY SurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint
 
 EGLBoolean EGLAPIENTRY ReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)", dpy, surface, buffer);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)", dpy, surface, buffer);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -1156,7 +1015,7 @@ EGLBoolean EGLAPIENTRY ReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLin
 
 EGLBoolean EGLAPIENTRY SwapInterval(EGLDisplay dpy, EGLint interval)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLint interval = %d)", dpy, interval);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLint interval = %d)", dpy, interval);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display*>(dpy);
@@ -1189,7 +1048,7 @@ EGLBoolean EGLAPIENTRY SwapInterval(EGLDisplay dpy, EGLint interval)
 // EGL 1.2
 EGLBoolean EGLAPIENTRY BindAPI(EGLenum api)
 {
-     EVENT_API_LOCK1("(EGLenum api = 0x%X)", api);
+    EVENT("(EGLenum api = 0x%X)", api);
     Thread *thread = GetCurrentThread();
 
     switch (api)
@@ -1213,7 +1072,7 @@ EGLBoolean EGLAPIENTRY BindAPI(EGLenum api)
 
 EGLenum EGLAPIENTRY QueryAPI(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     EGLenum API = thread->getAPI();
@@ -1224,7 +1083,7 @@ EGLenum EGLAPIENTRY QueryAPI(void)
 
 EGLSurface EGLAPIENTRY CreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLenum buftype = 0x%X, EGLClientBuffer buffer = 0x%0.8p, "
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLenum buftype = 0x%X, EGLClientBuffer buffer = 0x%0.8p, "
           "EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)",
           dpy, buftype, buffer, config, attrib_list);
     Thread *thread = GetCurrentThread();
@@ -1254,7 +1113,7 @@ EGLSurface EGLAPIENTRY CreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buf
 
 EGLBoolean EGLAPIENTRY ReleaseThread(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     MakeCurrent(EGL_NO_DISPLAY, EGL_NO_CONTEXT, EGL_NO_SURFACE, EGL_NO_SURFACE);
@@ -1265,7 +1124,7 @@ EGLBoolean EGLAPIENTRY ReleaseThread(void)
 
 EGLBoolean EGLAPIENTRY WaitClient(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     Display *display = thread->getDisplay();
@@ -1291,7 +1150,7 @@ EGLBoolean EGLAPIENTRY WaitClient(void)
 // EGL 1.4
 EGLContext EGLAPIENTRY GetCurrentContext(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
     Thread *thread = GetCurrentThread();
 
     gl::Context *context = thread->getContext();
@@ -1303,7 +1162,7 @@ EGLContext EGLAPIENTRY GetCurrentContext(void)
 // EGL 1.5
 EGLSync EGLAPIENTRY CreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLenum type = 0x%X, const EGLint* attrib_list = 0x%0.8p)", dpy, type, attrib_list);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLenum type = 0x%X, const EGLint* attrib_list = 0x%0.8p)", dpy, type, attrib_list);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1313,7 +1172,7 @@ EGLSync EGLAPIENTRY CreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *at
 
 EGLBoolean EGLAPIENTRY DestroySync(EGLDisplay dpy, EGLSync sync)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p)", dpy, sync);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p)", dpy, sync);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1323,7 +1182,7 @@ EGLBoolean EGLAPIENTRY DestroySync(EGLDisplay dpy, EGLSync sync)
 
 EGLint EGLAPIENTRY ClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X, EGLTime timeout = %d)", dpy, sync, flags, timeout);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X, EGLTime timeout = %d)", dpy, sync, flags, timeout);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1333,7 +1192,7 @@ EGLint EGLAPIENTRY ClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EG
 
 EGLBoolean EGLAPIENTRY GetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint attribute = 0x%X, EGLAttrib *value = 0x%0.8p)", dpy, sync, attribute, value);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint attribute = 0x%X, EGLAttrib *value = 0x%0.8p)", dpy, sync, attribute, value);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1343,7 +1202,7 @@ EGLBoolean EGLAPIENTRY GetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attrib
 
 EGLImage EGLAPIENTRY CreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, "
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, "
           "EGLClientBuffer buffer = 0x%0.8p, const EGLAttrib *attrib_list = 0x%0.8p)",
           dpy, ctx, target, buffer, attrib_list);
     Thread *thread = GetCurrentThread();
@@ -1355,7 +1214,7 @@ EGLImage EGLAPIENTRY CreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target,
 
 EGLBoolean EGLAPIENTRY DestroyImage(EGLDisplay dpy, EGLImage image)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)", dpy, image);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)", dpy, image);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1365,7 +1224,7 @@ EGLBoolean EGLAPIENTRY DestroyImage(EGLDisplay dpy, EGLImage image)
 
 EGLDisplay EGLAPIENTRY GetPlatformDisplay(EGLenum platform, void *native_display, const EGLAttrib *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
+    EVENT("(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
           platform, native_display, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -1376,7 +1235,7 @@ EGLDisplay EGLAPIENTRY GetPlatformDisplay(EGLenum platform, void *native_display
 
 EGLSurface EGLAPIENTRY CreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_window = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_window = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
           dpy, config, native_window, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -1387,7 +1246,7 @@ EGLSurface EGLAPIENTRY CreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig con
 
 EGLSurface EGLAPIENTRY CreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_pixmap = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_pixmap = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
           dpy, config, native_pixmap, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -1398,7 +1257,7 @@ EGLSurface EGLAPIENTRY CreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig con
 
 EGLBoolean EGLAPIENTRY WaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags)
 {
-     EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X)", dpy, sync, flags);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X)", dpy, sync, flags);
     Thread *thread = GetCurrentThread();
 
     UNIMPLEMENTED();
@@ -1408,7 +1267,7 @@ EGLBoolean EGLAPIENTRY WaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags)
 
 __eglMustCastToProperFunctionPointerType EGLAPIENTRY GetProcAddress(const char *procname)
 {
-     EVENT_API_LOCK1("(const char *procname = \"%s\")", procname);
+    EVENT("(const char *procname = \"%s\")", procname);
     Thread *thread = GetCurrentThread();
 
     typedef std::map<std::string, __eglMustCastToProperFunctionPointerType> ProcAddressMap;
diff --git a/src/libGLESv2/entry_points_egl.h b/src/libGLESv2/entry_points_egl.h
index 26fc339c6..259a20968 100644
--- a/src/libGLESv2/entry_points_egl.h
+++ b/src/libGLESv2/entry_points_egl.h
@@ -33,7 +33,6 @@ ANGLE_EXPORT EGLint EGLAPIENTRY GetError(void);
 ANGLE_EXPORT __eglMustCastToProperFunctionPointerType EGLAPIENTRY GetProcAddress(const char *procname);
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY Initialize(EGLDisplay dpy, EGLint *major, EGLint *minor);
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY MakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
-ANGLE_EXPORT EGLBoolean EGLAPIENTRY MakeCurrent_nolock(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY QueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value);
 ANGLE_EXPORT const char *EGLAPIENTRY QueryString(EGLDisplay dpy, EGLint name);
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY QuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value);
diff --git a/src/libGLESv2/entry_points_egl_ext.cpp b/src/libGLESv2/entry_points_egl_ext.cpp
index 03f625057..b18a10d92 100644
--- a/src/libGLESv2/entry_points_egl_ext.cpp
+++ b/src/libGLESv2/entry_points_egl_ext.cpp
@@ -19,15 +19,13 @@
 
 #include "common/debug.h"
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace egl
 {
 
 // EGL_ANGLE_query_surface_pointer
 EGLBoolean EGLAPIENTRY QuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, void **value = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, void **value = 0x%0.8p)",
           dpy, surface, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -84,7 +82,7 @@ EGLBoolean EGLAPIENTRY QuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surfa
 // EGL_NV_post_sub_buffer
 EGLBoolean EGLAPIENTRY PostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint x = %d, EGLint y = %d, EGLint width = %d, EGLint height = %d)", dpy, surface, x, y, width, height);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint x = %d, EGLint y = %d, EGLint width = %d, EGLint height = %d)", dpy, surface, x, y, width, height);
     Thread *thread = GetCurrentThread();
 
     if (x < 0 || y < 0 || width < 0 || height < 0)
@@ -136,7 +134,7 @@ EGLBoolean EGLAPIENTRY PostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLin
 // EGL_EXT_platform_base
 EGLDisplay EGLAPIENTRY GetPlatformDisplayEXT(EGLenum platform, void *native_display, const EGLint *attrib_list)
 {
-    EVENT_API_LOCK1("(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
+    EVENT("(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)",
           platform, native_display, attrib_list);
     Thread *thread = GetCurrentThread();
 
@@ -371,7 +369,7 @@ EGLDisplay EGLAPIENTRY GetPlatformDisplayEXT(EGLenum platform, void *native_disp
 // EGL_EXT_device_query
 EGLBoolean EGLAPIENTRY QueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribute, EGLAttrib *value)
 {
-    EVENT_API_LOCK1("(EGLDeviceEXT device = 0x%0.8p, EGLint attribute = %d, EGLAttrib *value = 0x%0.8p)",
+    EVENT("(EGLDeviceEXT device = 0x%0.8p, EGLint attribute = %d, EGLAttrib *value = 0x%0.8p)",
           device, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -419,7 +417,7 @@ EGLBoolean EGLAPIENTRY QueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribut
 // EGL_EXT_device_query
 const char * EGLAPIENTRY QueryDeviceStringEXT(EGLDeviceEXT device, EGLint name)
 {
-    EVENT_API_LOCK1("(EGLDeviceEXT device = 0x%0.8p, EGLint name = %d)",
+    EVENT("(EGLDeviceEXT device = 0x%0.8p, EGLint name = %d)",
           device, name);
     Thread *thread = GetCurrentThread();
 
@@ -448,7 +446,7 @@ const char * EGLAPIENTRY QueryDeviceStringEXT(EGLDeviceEXT device, EGLint name)
 // EGL_EXT_device_query
 EGLBoolean EGLAPIENTRY QueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLint attribute = %d, EGLAttrib *value = 0x%0.8p)",
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLint attribute = %d, EGLAttrib *value = 0x%0.8p)",
           dpy, attribute, value);
     Thread *thread = GetCurrentThread();
 
@@ -489,7 +487,7 @@ ANGLE_EXPORT EGLImageKHR EGLAPIENTRY CreateImageKHR(EGLDisplay dpy,
                                                     EGLClientBuffer buffer,
                                                     const EGLint *attrib_list)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, "
         "EGLClientBuffer buffer = 0x%0.8p, const EGLAttrib *attrib_list = 0x%0.8p)",
         dpy, ctx, target, buffer, attrib_list);
@@ -519,7 +517,7 @@ ANGLE_EXPORT EGLImageKHR EGLAPIENTRY CreateImageKHR(EGLDisplay dpy,
 
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY DestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)", dpy, image);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)", dpy, image);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display *>(dpy);
@@ -541,7 +539,7 @@ ANGLE_EXPORT EGLDeviceEXT EGLAPIENTRY CreateDeviceANGLE(EGLint device_type,
                                                         void *native_device,
                                                         const EGLAttrib *attrib_list)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLint device_type = %d, void* native_device = 0x%0.8p, const EGLAttrib* attrib_list = "
         "0x%0.8p)",
         device_type, native_device, attrib_list);
@@ -568,7 +566,7 @@ ANGLE_EXPORT EGLDeviceEXT EGLAPIENTRY CreateDeviceANGLE(EGLint device_type,
 
 ANGLE_EXPORT EGLBoolean EGLAPIENTRY ReleaseDeviceANGLE(EGLDeviceEXT device)
 {
-    EVENT_API_LOCK1("(EGLDeviceEXT device = 0x%0.8p)", device);
+    EVENT("(EGLDeviceEXT device = 0x%0.8p)", device);
     Thread *thread = GetCurrentThread();
 
     Device *dev = static_cast<Device *>(device);
@@ -588,7 +586,7 @@ ANGLE_EXPORT EGLBoolean EGLAPIENTRY ReleaseDeviceANGLE(EGLDeviceEXT device)
 // EGL_KHR_stream
 EGLStreamKHR EGLAPIENTRY CreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_list)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, const EGLAttrib* attrib_list = 0x%0.8p)", dpy, attrib_list);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, const EGLAttrib* attrib_list = 0x%0.8p)", dpy, attrib_list);
     Thread *thread = GetCurrentThread();
 
     Display *display = static_cast<Display *>(dpy);
@@ -615,7 +613,7 @@ EGLStreamKHR EGLAPIENTRY CreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_li
 
 EGLBoolean EGLAPIENTRY DestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
     Thread *thread = GetCurrentThread();
 
     Display *display     = static_cast<Display *>(dpy);
@@ -638,7 +636,7 @@ EGLBoolean EGLAPIENTRY StreamAttribKHR(EGLDisplay dpy,
                                        EGLenum attribute,
                                        EGLint value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, EGLenum attribute = 0x%X, "
         "EGLint value = 0x%X)",
         dpy, stream, attribute, value);
@@ -675,7 +673,7 @@ EGLBoolean EGLAPIENTRY QueryStreamKHR(EGLDisplay dpy,
                                       EGLenum attribute,
                                       EGLint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, EGLenum attribute = 0x%X, "
         "EGLint value = 0x%0.8p)",
         dpy, stream, attribute, value);
@@ -715,7 +713,7 @@ EGLBoolean EGLAPIENTRY QueryStreamu64KHR(EGLDisplay dpy,
                                          EGLenum attribute,
                                          EGLuint64KHR *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, EGLenum attribute = 0x%X, "
         "EGLuint64KHR value = 0x%0.8p)",
         dpy, stream, attribute, value);
@@ -749,7 +747,7 @@ EGLBoolean EGLAPIENTRY QueryStreamu64KHR(EGLDisplay dpy,
 
 EGLBoolean EGLAPIENTRY StreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
     Thread *thread = GetCurrentThread();
 
     Display *display     = static_cast<Display *>(dpy);
@@ -776,7 +774,7 @@ EGLBoolean EGLAPIENTRY StreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStr
 
 EGLBoolean EGLAPIENTRY StreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
     Thread *thread = GetCurrentThread();
 
     Display *display     = static_cast<Display *>(dpy);
@@ -803,7 +801,7 @@ EGLBoolean EGLAPIENTRY StreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR str
 
 EGLBoolean EGLAPIENTRY StreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
 {
-    EVENT_API_LOCK1("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
+    EVENT("(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR = 0x%0.8p)", dpy, stream);
     Thread *thread = GetCurrentThread();
 
     Display *display     = static_cast<Display *>(dpy);
@@ -832,7 +830,7 @@ EGLBoolean EGLAPIENTRY StreamConsumerGLTextureExternalAttribsNV(EGLDisplay dpy,
                                                                 EGLStreamKHR stream,
                                                                 const EGLAttrib *attrib_list)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, EGLAttrib attrib_list = 0x%0.8p",
         dpy, stream, attrib_list);
     Thread *thread = GetCurrentThread();
@@ -865,7 +863,7 @@ EGLBoolean EGLAPIENTRY CreateStreamProducerD3DTextureNV12ANGLE(EGLDisplay dpy,
                                                                EGLStreamKHR stream,
                                                                const EGLAttrib *attrib_list)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, EGLAttrib attrib_list = 0x%0.8p",
         dpy, stream, attrib_list);
     Thread *thread = GetCurrentThread();
@@ -898,7 +896,7 @@ EGLBoolean EGLAPIENTRY StreamPostD3DTextureNV12ANGLE(EGLDisplay dpy,
                                                      void *texture,
                                                      const EGLAttrib *attrib_list)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLStreamKHR stream = 0x%0.8p, void* texture = 0x%0.8p, "
         "EGLAttrib attrib_list = 0x%0.8p",
         dpy, stream, texture, attrib_list);
@@ -931,7 +929,7 @@ ANGLE_EXPORT EGLBoolean SwapBuffersWithDamageEXT(EGLDisplay dpy,
                                                  EGLint *rects,
                                                  EGLint n_rects)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint *rects = 0x%0.8p, EGLint "
         "n_rects = %d)",
         dpy, surface, rects, n_rects);
diff --git a/src/libGLESv2/entry_points_emulator.h b/src/libGLESv2/entry_points_emulator.h
deleted file mode 100644
index 100ffcb0e..000000000
--- a/src/libGLESv2/entry_points_emulator.h
+++ /dev/null
@@ -1,32 +0,0 @@
-//
-// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-//
-
-// entry_points_emulator.h : Defines the entry points to lock each GL Commands and enforce the MakeCurrrent.
-
-#ifndef LIBGLESV2_ENTRYPOINTSEMULATOR_H_
-#define LIBGLESV2_ENTRYPOINTSEMULATOR_H
-
-#include "libGLESv2/entry_points_egl.h"
-#include "libANGLE/Thread.h"
-
-#define EVENT_API_LOCK(message, ...) \
-   gl::ScopedLock lock(gl::getGlobalRendererLock());
-
-#define EVENT_API_LOCK0(message, ...) \
-   gl::ScopedLock lock(gl::getGlobalRendererLock()); \
-   Thread *curThread = GetCurrentThread(); \
-   if (curThread->getContext() != EGL_NO_CONTEXT && curThread->getReadSurface() != EGL_NO_SURFACE && curThread->getDrawSurface() != EGL_NO_SURFACE) \
-      if (curThread->getContext() != getCurContext() || curThread->getReadSurface() != getCurReadSurface() || curThread->getDrawSurface() != getCurDrawSurface()) \
-          MakeCurrent_nolock(curThread->getDisplay(), curThread->getDrawSurface(), curThread->getReadSurface(), curThread->getContext());
-
-#define EVENT_API_LOCK1(message, ...) \
-   gl::ScopedLock lock(gl::getGlobalRendererLock()); \
-   egl::Thread *curThread = egl::GetCurrentThread(); \
-   if (curThread->getContext() != EGL_NO_CONTEXT && curThread->getReadSurface() != EGL_NO_SURFACE && curThread->getDrawSurface() != EGL_NO_SURFACE) \
-      if (curThread->getContext() != egl::getCurContext() || curThread->getReadSurface() != egl::getCurReadSurface() || curThread->getDrawSurface() != egl::getCurDrawSurface()) \
-          egl::MakeCurrent_nolock(curThread->getDisplay(), curThread->getDrawSurface(), curThread->getReadSurface(), curThread->getContext());
-
-#endif // LIBGLESV2_ENTRYPOINTSEMULATOR_H
\ No newline at end of file
diff --git a/src/libGLESv2/entry_points_gles_2_0.cpp b/src/libGLESv2/entry_points_gles_2_0.cpp
index 95c53fe0a..91d599e58 100644
--- a/src/libGLESv2/entry_points_gles_2_0.cpp
+++ b/src/libGLESv2/entry_points_gles_2_0.cpp
@@ -33,14 +33,12 @@
 #include "common/debug.h"
 #include "common/utilities.h"
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace gl
 {
 
 void GL_APIENTRY ActiveTexture(GLenum texture)
 {
-    EVENT_API_LOCK1("(GLenum texture = 0x%X)", texture);
+    EVENT("(GLenum texture = 0x%X)", texture);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -56,7 +54,7 @@ void GL_APIENTRY ActiveTexture(GLenum texture)
 
 void GL_APIENTRY AttachShader(GLuint program, GLuint shader)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLuint shader = %d)", program, shader);
+    EVENT("(GLuint program = %d, GLuint shader = %d)", program, shader);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -72,7 +70,7 @@ void GL_APIENTRY AttachShader(GLuint program, GLuint shader)
 
 void GL_APIENTRY BindAttribLocation(GLuint program, GLuint index, const GLchar* name)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLuint index = %d, const GLchar* name = 0x%0.8p)", program, index, name);
+    EVENT("(GLuint program = %d, GLuint index = %d, const GLchar* name = 0x%0.8p)", program, index, name);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -89,7 +87,7 @@ void GL_APIENTRY BindAttribLocation(GLuint program, GLuint index, const GLchar*
 
 void GL_APIENTRY BindBuffer(GLenum target, GLuint buffer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint buffer = %d)", target, buffer);
+    EVENT("(GLenum target = 0x%X, GLuint buffer = %d)", target, buffer);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -105,7 +103,7 @@ void GL_APIENTRY BindBuffer(GLenum target, GLuint buffer)
 
 void GL_APIENTRY BindFramebuffer(GLenum target, GLuint framebuffer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint framebuffer = %d)", target, framebuffer);
+    EVENT("(GLenum target = 0x%X, GLuint framebuffer = %d)", target, framebuffer);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -121,7 +119,7 @@ void GL_APIENTRY BindFramebuffer(GLenum target, GLuint framebuffer)
 
 void GL_APIENTRY BindRenderbuffer(GLenum target, GLuint renderbuffer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint renderbuffer = %d)", target, renderbuffer);
+    EVENT("(GLenum target = 0x%X, GLuint renderbuffer = %d)", target, renderbuffer);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -137,7 +135,7 @@ void GL_APIENTRY BindRenderbuffer(GLenum target, GLuint renderbuffer)
 
 void GL_APIENTRY BindTexture(GLenum target, GLuint texture)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint texture = %d)", target, texture);
+    EVENT("(GLenum target = 0x%X, GLuint texture = %d)", target, texture);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -153,7 +151,7 @@ void GL_APIENTRY BindTexture(GLenum target, GLuint texture)
 
 void GL_APIENTRY BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
 {
-    EVENT_API_LOCK1("(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)",
+    EVENT("(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)",
           red, green, blue, alpha);
 
     Context *context = GetValidGlobalContext();
@@ -165,7 +163,7 @@ void GL_APIENTRY BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclamp
 
 void GL_APIENTRY BlendEquation(GLenum mode)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X)", mode);
+    EVENT("(GLenum mode = 0x%X)", mode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -181,7 +179,7 @@ void GL_APIENTRY BlendEquation(GLenum mode)
 
 void GL_APIENTRY BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
 {
-    EVENT_API_LOCK1("(GLenum modeRGB = 0x%X, GLenum modeAlpha = 0x%X)", modeRGB, modeAlpha);
+    EVENT("(GLenum modeRGB = 0x%X, GLenum modeAlpha = 0x%X)", modeRGB, modeAlpha);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -198,7 +196,7 @@ void GL_APIENTRY BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
 
 void GL_APIENTRY BlendFunc(GLenum sfactor, GLenum dfactor)
 {
-    EVENT_API_LOCK1("(GLenum sfactor = 0x%X, GLenum dfactor = 0x%X)", sfactor, dfactor);
+    EVENT("(GLenum sfactor = 0x%X, GLenum dfactor = 0x%X)", sfactor, dfactor);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -214,7 +212,7 @@ void GL_APIENTRY BlendFunc(GLenum sfactor, GLenum dfactor)
 
 void GL_APIENTRY BlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
 {
-    EVENT_API_LOCK1("(GLenum srcRGB = 0x%X, GLenum dstRGB = 0x%X, GLenum srcAlpha = 0x%X, GLenum dstAlpha = 0x%X)",
+    EVENT("(GLenum srcRGB = 0x%X, GLenum dstRGB = 0x%X, GLenum srcAlpha = 0x%X, GLenum dstAlpha = 0x%X)",
           srcRGB, dstRGB, srcAlpha, dstAlpha);
 
     Context *context = GetValidGlobalContext();
@@ -232,7 +230,7 @@ void GL_APIENTRY BlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha
 
 void GL_APIENTRY BufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p, GLenum usage = %d)",
+    EVENT("(GLenum target = 0x%X, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p, GLenum usage = %d)",
           target, size, data, usage);
 
     Context *context = GetValidGlobalContext();
@@ -249,7 +247,7 @@ void GL_APIENTRY BufferData(GLenum target, GLsizeiptr size, const GLvoid* data,
 
 void GL_APIENTRY BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p)",
           target, offset, size, data);
 
     Context *context = GetValidGlobalContext();
@@ -267,7 +265,7 @@ void GL_APIENTRY BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size,
 
 GLenum GL_APIENTRY CheckFramebufferStatus(GLenum target)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X)", target);
+    EVENT("(GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -289,7 +287,7 @@ GLenum GL_APIENTRY CheckFramebufferStatus(GLenum target)
 
 void GL_APIENTRY Clear(GLbitfield mask)
 {
-    EVENT_API_LOCK1("(GLbitfield mask = 0x%X)", mask);
+    EVENT("(GLbitfield mask = 0x%X)", mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -305,7 +303,7 @@ void GL_APIENTRY Clear(GLbitfield mask)
 
 void GL_APIENTRY ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
 {
-    EVENT_API_LOCK1("(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)",
+    EVENT("(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)",
           red, green, blue, alpha);
 
     Context *context = GetValidGlobalContext();
@@ -317,7 +315,7 @@ void GL_APIENTRY ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclamp
 
 void GL_APIENTRY ClearDepthf(GLclampf depth)
 {
-    EVENT_API_LOCK1("(GLclampf depth = %f)", depth);
+    EVENT("(GLclampf depth = %f)", depth);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -328,7 +326,7 @@ void GL_APIENTRY ClearDepthf(GLclampf depth)
 
 void GL_APIENTRY ClearStencil(GLint s)
 {
-    EVENT_API_LOCK1("(GLint s = %d)", s);
+    EVENT("(GLint s = %d)", s);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -339,7 +337,7 @@ void GL_APIENTRY ClearStencil(GLint s)
 
 void GL_APIENTRY ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
 {
-    EVENT_API_LOCK1("(GLboolean red = %d, GLboolean green = %u, GLboolean blue = %u, GLboolean alpha = %u)",
+    EVENT("(GLboolean red = %d, GLboolean green = %u, GLboolean blue = %u, GLboolean alpha = %u)",
           red, green, blue, alpha);
 
     Context *context = GetValidGlobalContext();
@@ -351,7 +349,7 @@ void GL_APIENTRY ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboo
 
 void GL_APIENTRY CompileShader(GLuint shader)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d)", shader);
+    EVENT("(GLuint shader = %d)", shader);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -368,7 +366,7 @@ void GL_APIENTRY CompileShader(GLuint shader)
 void GL_APIENTRY CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height,
                                       GLint border, GLsizei imageSize, const GLvoid* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
           "GLsizei height = %d, GLint border = %d, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)",
           target, level, internalformat, width, height, border, imageSize, data);
 
@@ -390,7 +388,7 @@ void GL_APIENTRY CompressedTexImage2D(GLenum target, GLint level, GLenum interna
 void GL_APIENTRY CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height,
                                          GLenum format, GLsizei imageSize, const GLvoid* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
           "GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, "
           "GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)",
           target, level, xoffset, yoffset, width, height, format, imageSize, data);
@@ -412,7 +410,7 @@ void GL_APIENTRY CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffs
 
 void GL_APIENTRY CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
           "GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, GLint border = %d)",
           target, level, internalformat, x, y, width, height, border);
 
@@ -431,7 +429,7 @@ void GL_APIENTRY CopyTexImage2D(GLenum target, GLint level, GLenum internalforma
 
 void GL_APIENTRY CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
           "GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)",
           target, level, xoffset, yoffset, x, y, width, height);
 
@@ -451,7 +449,7 @@ void GL_APIENTRY CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GL
 
 GLuint GL_APIENTRY CreateProgram(void)
 {
-    EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -464,7 +462,7 @@ GLuint GL_APIENTRY CreateProgram(void)
 
 GLuint GL_APIENTRY CreateShader(GLenum type)
 {
-    EVENT_API_LOCK1("(GLenum type = 0x%X)", type);
+    EVENT("(GLenum type = 0x%X)", type);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -481,7 +479,7 @@ GLuint GL_APIENTRY CreateShader(GLenum type)
 
 void GL_APIENTRY CullFace(GLenum mode)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X)", mode);
+    EVENT("(GLenum mode = 0x%X)", mode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -504,7 +502,7 @@ void GL_APIENTRY CullFace(GLenum mode)
 
 void GL_APIENTRY DeleteBuffers(GLsizei n, const GLuint* buffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* buffers = 0x%0.8p)", n, buffers);
+    EVENT("(GLsizei n = %d, const GLuint* buffers = 0x%0.8p)", n, buffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -523,7 +521,7 @@ void GL_APIENTRY DeleteBuffers(GLsizei n, const GLuint* buffers)
 
 void GL_APIENTRY DeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* framebuffers = 0x%0.8p)", n, framebuffers);
+    EVENT("(GLsizei n = %d, const GLuint* framebuffers = 0x%0.8p)", n, framebuffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -545,7 +543,7 @@ void GL_APIENTRY DeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
 
 void GL_APIENTRY DeleteProgram(GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint program = %d)", program);
+    EVENT("(GLuint program = %d)", program);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -575,7 +573,7 @@ void GL_APIENTRY DeleteProgram(GLuint program)
 
 void GL_APIENTRY DeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* renderbuffers = 0x%0.8p)", n, renderbuffers);
+    EVENT("(GLsizei n = %d, const GLuint* renderbuffers = 0x%0.8p)", n, renderbuffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -594,7 +592,7 @@ void GL_APIENTRY DeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
 
 void GL_APIENTRY DeleteShader(GLuint shader)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d)", shader);
+    EVENT("(GLuint shader = %d)", shader);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -624,7 +622,7 @@ void GL_APIENTRY DeleteShader(GLuint shader)
 
 void GL_APIENTRY DeleteTextures(GLsizei n, const GLuint* textures)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* textures = 0x%0.8p)", n, textures);
+    EVENT("(GLsizei n = %d, const GLuint* textures = 0x%0.8p)", n, textures);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -646,7 +644,7 @@ void GL_APIENTRY DeleteTextures(GLsizei n, const GLuint* textures)
 
 void GL_APIENTRY DepthFunc(GLenum func)
 {
-    EVENT_API_LOCK1("(GLenum func = 0x%X)", func);
+    EVENT("(GLenum func = 0x%X)", func);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -674,7 +672,7 @@ void GL_APIENTRY DepthFunc(GLenum func)
 
 void GL_APIENTRY DepthMask(GLboolean flag)
 {
-    EVENT_API_LOCK1("(GLboolean flag = %u)", flag);
+    EVENT("(GLboolean flag = %u)", flag);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -685,7 +683,7 @@ void GL_APIENTRY DepthMask(GLboolean flag)
 
 void GL_APIENTRY DepthRangef(GLclampf zNear, GLclampf zFar)
 {
-    EVENT_API_LOCK1("(GLclampf zNear = %f, GLclampf zFar = %f)", zNear, zFar);
+    EVENT("(GLclampf zNear = %f, GLclampf zFar = %f)", zNear, zFar);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -696,7 +694,7 @@ void GL_APIENTRY DepthRangef(GLclampf zNear, GLclampf zFar)
 
 void GL_APIENTRY DetachShader(GLuint program, GLuint shader)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLuint shader = %d)", program, shader);
+    EVENT("(GLuint program = %d, GLuint shader = %d)", program, shader);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -723,7 +721,7 @@ void GL_APIENTRY DetachShader(GLuint program, GLuint shader)
 
 void GL_APIENTRY Disable(GLenum cap)
 {
-    EVENT_API_LOCK1("(GLenum cap = 0x%X)", cap);
+    EVENT("(GLenum cap = 0x%X)", cap);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -739,7 +737,7 @@ void GL_APIENTRY Disable(GLenum cap)
 
 void GL_APIENTRY DisableVertexAttribArray(GLuint index)
 {
-    EVENT_API_LOCK1("(GLuint index = %d)", index);
+    EVENT("(GLuint index = %d)", index);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -756,7 +754,7 @@ void GL_APIENTRY DisableVertexAttribArray(GLuint index)
 
 void GL_APIENTRY DrawArrays(GLenum mode, GLint first, GLsizei count)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d)", mode, first, count);
+    EVENT("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d)", mode, first, count);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -777,7 +775,7 @@ void GL_APIENTRY DrawArrays(GLenum mode, GLint first, GLsizei count)
 
 void GL_APIENTRY DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p)",
+    EVENT("(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p)",
           mode, count, type, indices);
 
     Context *context = GetValidGlobalContext();
@@ -800,7 +798,7 @@ void GL_APIENTRY DrawElements(GLenum mode, GLsizei count, GLenum type, const GLv
 
 void GL_APIENTRY Enable(GLenum cap)
 {
-    EVENT_API_LOCK1("(GLenum cap = 0x%X)", cap);
+    EVENT("(GLenum cap = 0x%X)", cap);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -816,7 +814,7 @@ void GL_APIENTRY Enable(GLenum cap)
 
 void GL_APIENTRY EnableVertexAttribArray(GLuint index)
 {
-    EVENT_API_LOCK1("(GLuint index = %d)", index);
+    EVENT("(GLuint index = %d)", index);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -833,7 +831,7 @@ void GL_APIENTRY EnableVertexAttribArray(GLuint index)
 
 void GL_APIENTRY Finish(void)
 {
-    EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -849,7 +847,7 @@ void GL_APIENTRY Finish(void)
 
 void GL_APIENTRY Flush(void)
 {
-    EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -865,7 +863,7 @@ void GL_APIENTRY Flush(void)
 
 void GL_APIENTRY FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum renderbuffertarget = 0x%X, "
+    EVENT("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum renderbuffertarget = 0x%X, "
           "GLuint renderbuffer = %d)", target, attachment, renderbuffertarget, renderbuffer);
 
     Context *context = GetValidGlobalContext();
@@ -884,7 +882,7 @@ void GL_APIENTRY FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenu
 
 void GL_APIENTRY FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum textarget = 0x%X, "
+    EVENT("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum textarget = 0x%X, "
           "GLuint texture = %d, GLint level = %d)", target, attachment, textarget, texture, level);
 
     Context *context = GetValidGlobalContext();
@@ -902,7 +900,7 @@ void GL_APIENTRY FramebufferTexture2D(GLenum target, GLenum attachment, GLenum t
 
 void GL_APIENTRY FrontFace(GLenum mode)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X)", mode);
+    EVENT("(GLenum mode = 0x%X)", mode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -923,7 +921,7 @@ void GL_APIENTRY FrontFace(GLenum mode)
 
 void GL_APIENTRY GenBuffers(GLsizei n, GLuint* buffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* buffers = 0x%0.8p)", n, buffers);
+    EVENT("(GLsizei n = %d, GLuint* buffers = 0x%0.8p)", n, buffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -942,7 +940,7 @@ void GL_APIENTRY GenBuffers(GLsizei n, GLuint* buffers)
 
 void GL_APIENTRY GenerateMipmap(GLenum target)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X)", target);
+    EVENT("(GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -958,7 +956,7 @@ void GL_APIENTRY GenerateMipmap(GLenum target)
 
 void GL_APIENTRY GenFramebuffers(GLsizei n, GLuint* framebuffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* framebuffers = 0x%0.8p)", n, framebuffers);
+    EVENT("(GLsizei n = %d, GLuint* framebuffers = 0x%0.8p)", n, framebuffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -977,7 +975,7 @@ void GL_APIENTRY GenFramebuffers(GLsizei n, GLuint* framebuffers)
 
 void GL_APIENTRY GenRenderbuffers(GLsizei n, GLuint* renderbuffers)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* renderbuffers = 0x%0.8p)", n, renderbuffers);
+    EVENT("(GLsizei n = %d, GLuint* renderbuffers = 0x%0.8p)", n, renderbuffers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -996,7 +994,7 @@ void GL_APIENTRY GenRenderbuffers(GLsizei n, GLuint* renderbuffers)
 
 void GL_APIENTRY GenTextures(GLsizei n, GLuint* textures)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* textures = 0x%0.8p)", n, textures);
+    EVENT("(GLsizei n = %d, GLuint* textures = 0x%0.8p)", n, textures);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1015,7 +1013,7 @@ void GL_APIENTRY GenTextures(GLsizei n, GLuint* textures)
 
 void GL_APIENTRY GetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, GLsizei *length = 0x%0.8p, "
+    EVENT("(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, GLsizei *length = 0x%0.8p, "
           "GLint *size = 0x%0.8p, GLenum *type = %0.8p, GLchar *name = %0.8p)",
           program, index, bufsize, length, size, type, name);
 
@@ -1047,7 +1045,7 @@ void GL_APIENTRY GetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize,
 
 void GL_APIENTRY GetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, "
+    EVENT("(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, "
           "GLsizei* length = 0x%0.8p, GLint* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)",
           program, index, bufsize, length, size, type, name);
 
@@ -1080,7 +1078,7 @@ void GL_APIENTRY GetActiveUniform(GLuint program, GLuint index, GLsizei bufsize,
 
 void GL_APIENTRY GetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLsizei maxcount = %d, GLsizei* count = 0x%0.8p, GLuint* shaders = 0x%0.8p)",
+    EVENT("(GLuint program = %d, GLsizei maxcount = %d, GLsizei* count = 0x%0.8p, GLuint* shaders = 0x%0.8p)",
           program, maxcount, count, shaders);
 
     Context *context = GetValidGlobalContext();
@@ -1105,7 +1103,7 @@ void GL_APIENTRY GetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* c
 
 GLint GL_APIENTRY GetAttribLocation(GLuint program, const GLchar* name)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, const GLchar* name = %s)", program, name);
+    EVENT("(GLuint program = %d, const GLchar* name = %s)", program, name);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1131,7 +1129,7 @@ GLint GL_APIENTRY GetAttribLocation(GLuint program, const GLchar* name)
 
 void GL_APIENTRY GetBooleanv(GLenum pname, GLboolean* params)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLboolean* params = 0x%0.8p)",  pname, params);
+    EVENT("(GLenum pname = 0x%X, GLboolean* params = 0x%0.8p)",  pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1156,7 +1154,7 @@ void GL_APIENTRY GetBooleanv(GLenum pname, GLboolean* params)
 
 void GL_APIENTRY GetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1174,7 +1172,7 @@ void GL_APIENTRY GetBufferParameteriv(GLenum target, GLenum pname, GLint* params
 
 GLenum GL_APIENTRY GetError(void)
 {
-    EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetGlobalContext();
 
@@ -1188,7 +1186,7 @@ GLenum GL_APIENTRY GetError(void)
 
 void GL_APIENTRY GetFloatv(GLenum pname, GLfloat* params)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", pname, params);
+    EVENT("(GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1213,7 +1211,7 @@ void GL_APIENTRY GetFloatv(GLenum pname, GLfloat* params)
 
 void GL_APIENTRY GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
           target, attachment, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1234,7 +1232,7 @@ void GL_APIENTRY GetFramebufferAttachmentParameteriv(GLenum target, GLenum attac
 
 void GL_APIENTRY GetIntegerv(GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLint* params = 0x%0.8p)", pname, params);
+    EVENT("(GLenum pname = 0x%X, GLint* params = 0x%0.8p)", pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1260,7 +1258,7 @@ void GL_APIENTRY GetIntegerv(GLenum pname, GLint* params)
 
 void GL_APIENTRY GetProgramiv(GLuint program, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLenum pname = %d, GLint* params = 0x%0.8p)", program, pname, params);
+    EVENT("(GLuint program = %d, GLenum pname = %d, GLint* params = 0x%0.8p)", program, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1279,7 +1277,7 @@ void GL_APIENTRY GetProgramiv(GLuint program, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)",
+    EVENT("(GLuint program = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)",
           program, bufsize, length, infolog);
 
     Context *context = GetValidGlobalContext();
@@ -1303,7 +1301,7 @@ void GL_APIENTRY GetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* len
 
 void GL_APIENTRY GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1321,7 +1319,7 @@ void GL_APIENTRY GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint*
 
 void GL_APIENTRY GetShaderiv(GLuint shader, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d, GLenum pname = %d, GLint* params = 0x%0.8p)", shader, pname, params);
+    EVENT("(GLuint shader = %d, GLenum pname = %d, GLint* params = 0x%0.8p)", shader, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1338,7 +1336,7 @@ void GL_APIENTRY GetShaderiv(GLuint shader, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)",
+    EVENT("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)",
           shader, bufsize, length, infolog);
 
     Context *context = GetValidGlobalContext();
@@ -1362,7 +1360,7 @@ void GL_APIENTRY GetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* lengt
 
 void GL_APIENTRY GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
 {
-    EVENT_API_LOCK1("(GLenum shadertype = 0x%X, GLenum precisiontype = 0x%X, GLint* range = 0x%0.8p, GLint* precision = 0x%0.8p)",
+    EVENT("(GLenum shadertype = 0x%X, GLenum precisiontype = 0x%X, GLint* range = 0x%0.8p, GLint* precision = 0x%0.8p)",
           shadertype, precisiontype, range, precision);
 
     Context *context = GetValidGlobalContext();
@@ -1436,7 +1434,7 @@ void GL_APIENTRY GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontyp
 
 void GL_APIENTRY GetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)",
+    EVENT("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)",
           shader, bufsize, length, source);
 
     Context *context = GetValidGlobalContext();
@@ -1460,7 +1458,7 @@ void GL_APIENTRY GetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length
 
 const GLubyte *GL_APIENTRY GetString(GLenum name)
 {
-    EVENT_API_LOCK1("(GLenum name = 0x%X)", name);
+    EVENT("(GLenum name = 0x%X)", name);
 
     Context *context = GetValidGlobalContext();
 
@@ -1479,7 +1477,7 @@ const GLubyte *GL_APIENTRY GetString(GLenum name)
 
 void GL_APIENTRY GetTexParameterfv(GLenum target, GLenum pname, GLfloat* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1497,7 +1495,7 @@ void GL_APIENTRY GetTexParameterfv(GLenum target, GLenum pname, GLfloat* params)
 
 void GL_APIENTRY GetTexParameteriv(GLenum target, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1515,7 +1513,7 @@ void GL_APIENTRY GetTexParameteriv(GLenum target, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetUniformfv(GLuint program, GLint location, GLfloat* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLint location = %d, GLfloat* params = 0x%0.8p)", program, location, params);
+    EVENT("(GLuint program = %d, GLint location = %d, GLfloat* params = 0x%0.8p)", program, location, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1534,7 +1532,7 @@ void GL_APIENTRY GetUniformfv(GLuint program, GLint location, GLfloat* params)
 
 void GL_APIENTRY GetUniformiv(GLuint program, GLint location, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, GLint location = %d, GLint* params = 0x%0.8p)", program, location, params);
+    EVENT("(GLuint program = %d, GLint location = %d, GLint* params = 0x%0.8p)", program, location, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1553,7 +1551,7 @@ void GL_APIENTRY GetUniformiv(GLuint program, GLint location, GLint* params)
 
 GLint GL_APIENTRY GetUniformLocation(GLuint program, const GLchar* name)
 {
-    EVENT_API_LOCK1("(GLuint program = %d, const GLchar* name = 0x%0.8p)", program, name);
+    EVENT("(GLuint program = %d, const GLchar* name = 0x%0.8p)", program, name);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1584,7 +1582,7 @@ GLint GL_APIENTRY GetUniformLocation(GLuint program, const GLchar* name)
 
 void GL_APIENTRY GetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", index, pname, params);
+    EVENT("(GLuint index = %d, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", index, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1604,7 +1602,7 @@ void GL_APIENTRY GetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
 
 void GL_APIENTRY GetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", index, pname, params);
+    EVENT("(GLuint index = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", index, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1624,7 +1622,7 @@ void GL_APIENTRY GetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** pointer)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLenum pname = 0x%X, GLvoid** pointer = 0x%0.8p)", index, pname, pointer);
+    EVENT("(GLuint index = %d, GLenum pname = 0x%X, GLvoid** pointer = 0x%0.8p)", index, pname, pointer);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1643,7 +1641,7 @@ void GL_APIENTRY GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** po
 
 void GL_APIENTRY Hint(GLenum target, GLenum mode)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum mode = 0x%X)", target, mode);
+    EVENT("(GLenum target = 0x%X, GLenum mode = 0x%X)", target, mode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1677,7 +1675,7 @@ void GL_APIENTRY Hint(GLenum target, GLenum mode)
 
 GLboolean GL_APIENTRY IsBuffer(GLuint buffer)
 {
-    EVENT_API_LOCK1("(GLuint buffer = %d)", buffer);
+    EVENT("(GLuint buffer = %d)", buffer);
 
     Context *context = GetValidGlobalContext();
     if (context && buffer)
@@ -1695,7 +1693,7 @@ GLboolean GL_APIENTRY IsBuffer(GLuint buffer)
 
 GLboolean GL_APIENTRY IsEnabled(GLenum cap)
 {
-    EVENT_API_LOCK1("(GLenum cap = 0x%X)", cap);
+    EVENT("(GLenum cap = 0x%X)", cap);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1713,7 +1711,7 @@ GLboolean GL_APIENTRY IsEnabled(GLenum cap)
 
 GLboolean GL_APIENTRY IsFramebuffer(GLuint framebuffer)
 {
-    EVENT_API_LOCK1("(GLuint framebuffer = %d)", framebuffer);
+    EVENT("(GLuint framebuffer = %d)", framebuffer);
 
     Context *context = GetValidGlobalContext();
     if (context && framebuffer)
@@ -1731,7 +1729,7 @@ GLboolean GL_APIENTRY IsFramebuffer(GLuint framebuffer)
 
 GLboolean GL_APIENTRY IsProgram(GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint program = %d)", program);
+    EVENT("(GLuint program = %d)", program);
 
     Context *context = GetValidGlobalContext();
     if (context && program)
@@ -1749,7 +1747,7 @@ GLboolean GL_APIENTRY IsProgram(GLuint program)
 
 GLboolean GL_APIENTRY IsRenderbuffer(GLuint renderbuffer)
 {
-    EVENT_API_LOCK1("(GLuint renderbuffer = %d)", renderbuffer);
+    EVENT("(GLuint renderbuffer = %d)", renderbuffer);
 
     Context *context = GetValidGlobalContext();
     if (context && renderbuffer)
@@ -1767,7 +1765,7 @@ GLboolean GL_APIENTRY IsRenderbuffer(GLuint renderbuffer)
 
 GLboolean GL_APIENTRY IsShader(GLuint shader)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d)", shader);
+    EVENT("(GLuint shader = %d)", shader);
 
     Context *context = GetValidGlobalContext();
     if (context && shader)
@@ -1785,7 +1783,7 @@ GLboolean GL_APIENTRY IsShader(GLuint shader)
 
 GLboolean GL_APIENTRY IsTexture(GLuint texture)
 {
-    EVENT_API_LOCK1("(GLuint texture = %d)", texture);
+    EVENT("(GLuint texture = %d)", texture);
 
     Context *context = GetValidGlobalContext();
     if (context && texture)
@@ -1803,7 +1801,7 @@ GLboolean GL_APIENTRY IsTexture(GLuint texture)
 
 void GL_APIENTRY LineWidth(GLfloat width)
 {
-    EVENT_API_LOCK1("(GLfloat width = %f)", width);
+    EVENT("(GLfloat width = %f)", width);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1820,7 +1818,7 @@ void GL_APIENTRY LineWidth(GLfloat width)
 
 void GL_APIENTRY LinkProgram(GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint program = %d)", program);
+    EVENT("(GLuint program = %d)", program);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1847,12 +1845,7 @@ void GL_APIENTRY LinkProgram(GLuint program)
 
 void GL_APIENTRY PixelStorei(GLenum pname, GLint param)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLint param = %d)", pname, param);
-
-	//Huan
-	if (pname == GL_UNPACK_ROW_LENGTH) {
-		printf("Huan: GL_UNPACK_ROW_LENGTH = %d\n", param);
-	}
+    EVENT("(GLenum pname = 0x%X, GLint param = %d)", pname, param);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1935,7 +1928,7 @@ void GL_APIENTRY PixelStorei(GLenum pname, GLint param)
 
 void GL_APIENTRY PolygonOffset(GLfloat factor, GLfloat units)
 {
-    EVENT_API_LOCK1("(GLfloat factor = %f, GLfloat units = %f)", factor, units);
+    EVENT("(GLfloat factor = %f, GLfloat units = %f)", factor, units);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1947,7 +1940,7 @@ void GL_APIENTRY PolygonOffset(GLfloat factor, GLfloat units)
 void GL_APIENTRY ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height,
                             GLenum format, GLenum type, GLvoid* pixels)
 {
-    EVENT_API_LOCK1("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
+    EVENT("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
           "GLenum format = 0x%X, GLenum type = 0x%X, GLvoid* pixels = 0x%0.8p)",
           x, y, width, height, format, type,  pixels);
 
@@ -1966,7 +1959,7 @@ void GL_APIENTRY ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height,
 
 void GL_APIENTRY ReleaseShaderCompiler(void)
 {
-    EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetValidGlobalContext();
 
@@ -1984,7 +1977,7 @@ void GL_APIENTRY ReleaseShaderCompiler(void)
 
 void GL_APIENTRY RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
+    EVENT("(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
           target, internalformat, width, height);
 
     Context *context = GetValidGlobalContext();
@@ -2008,7 +2001,7 @@ void GL_APIENTRY RenderbufferStorage(GLenum target, GLenum internalformat, GLsiz
 
 void GL_APIENTRY SampleCoverage(GLclampf value, GLboolean invert)
 {
-    EVENT_API_LOCK1("(GLclampf value = %f, GLboolean invert = %u)", value, invert);
+    EVENT("(GLclampf value = %f, GLboolean invert = %u)", value, invert);
 
     Context* context = GetValidGlobalContext();
 
@@ -2020,7 +2013,7 @@ void GL_APIENTRY SampleCoverage(GLclampf value, GLboolean invert)
 
 void GL_APIENTRY Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)", x, y, width, height);
+    EVENT("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)", x, y, width, height);
 
     Context* context = GetValidGlobalContext();
     if (context)
@@ -2037,7 +2030,7 @@ void GL_APIENTRY Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
 
 void GL_APIENTRY ShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryformat, const GLvoid* binary, GLsizei length)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* shaders = 0x%0.8p, GLenum binaryformat = 0x%X, "
+    EVENT("(GLsizei n = %d, const GLuint* shaders = 0x%0.8p, GLenum binaryformat = 0x%X, "
           "const GLvoid* binary = 0x%0.8p, GLsizei length = %d)",
           n, shaders, binaryformat, binary, length);
 
@@ -2058,10 +2051,10 @@ void GL_APIENTRY ShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryfor
 
 void GL_APIENTRY ShaderSource(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length)
 {
-    EVENT_API_LOCK1("(GLuint shader = %d, GLsizei count = %d, const GLchar** string = 0x%0.8p, const GLint* length = 0x%0.8p)",
+    EVENT("(GLuint shader = %d, GLsizei count = %d, const GLchar** string = 0x%0.8p, const GLint* length = 0x%0.8p)",
           shader, count, string, length);
 
-	Context *context = GetValidGlobalContext();
+    Context *context = GetValidGlobalContext();
     if (context)
     {
         if (count < 0)
@@ -2086,7 +2079,7 @@ void GL_APIENTRY StencilFunc(GLenum func, GLint ref, GLuint mask)
 
 void GL_APIENTRY StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
 {
-    EVENT_API_LOCK1("(GLenum face = 0x%X, GLenum func = 0x%X, GLint ref = %d, GLuint mask = %d)", face, func, ref, mask);
+    EVENT("(GLenum face = 0x%X, GLenum func = 0x%X, GLint ref = %d, GLuint mask = %d)", face, func, ref, mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2131,7 +2124,7 @@ void GL_APIENTRY StencilMask(GLuint mask)
 
 void GL_APIENTRY StencilMaskSeparate(GLenum face, GLuint mask)
 {
-    EVENT_API_LOCK1("(GLenum face = 0x%X, GLuint mask = %d)", face, mask);
+    EVENT("(GLenum face = 0x%X, GLuint mask = %d)", face, mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2159,7 +2152,7 @@ void GL_APIENTRY StencilOp(GLenum fail, GLenum zfail, GLenum zpass)
 
 void GL_APIENTRY StencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
 {
-    EVENT_API_LOCK1("(GLenum face = 0x%X, GLenum fail = 0x%X, GLenum zfail = 0x%X, GLenum zpas = 0x%Xs)",
+    EVENT("(GLenum face = 0x%X, GLenum fail = 0x%X, GLenum zfail = 0x%X, GLenum zpas = 0x%Xs)",
           face, fail, zfail, zpass);
 
     Context *context = GetValidGlobalContext();
@@ -2235,7 +2228,7 @@ void GL_APIENTRY StencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenu
 void GL_APIENTRY TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,
                             GLint border, GLenum format, GLenum type, const GLvoid* pixels)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, GLsizei height = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, GLsizei height = %d, "
           "GLint border = %d, GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)",
           target, level, internalformat, width, height, border, format, type, pixels);
 
@@ -2256,7 +2249,7 @@ void GL_APIENTRY TexImage2D(GLenum target, GLint level, GLint internalformat, GL
 
 void GL_APIENTRY TexParameterf(GLenum target, GLenum pname, GLfloat param)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %f)", target, pname, param);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %f)", target, pname, param);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2273,7 +2266,7 @@ void GL_APIENTRY TexParameterf(GLenum target, GLenum pname, GLfloat param)
 
 void GL_APIENTRY TexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, const GLfloat* params = 0x%0.8p)", target,
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, const GLfloat* params = 0x%0.8p)", target,
           pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -2291,7 +2284,7 @@ void GL_APIENTRY TexParameterfv(GLenum target, GLenum pname, const GLfloat *para
 
 void GL_APIENTRY TexParameteri(GLenum target, GLenum pname, GLint param)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)", target, pname, param);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)", target, pname, param);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2308,7 +2301,7 @@ void GL_APIENTRY TexParameteri(GLenum target, GLenum pname, GLint param)
 
 void GL_APIENTRY TexParameteriv(GLenum target, GLenum pname, const GLint *params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, const GLint* params = 0x%0.8p)", target,
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, const GLint* params = 0x%0.8p)", target,
           pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -2327,7 +2320,7 @@ void GL_APIENTRY TexParameteriv(GLenum target, GLenum pname, const GLint *params
 void GL_APIENTRY TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height,
                                GLenum format, GLenum type, const GLvoid* pixels)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
           "GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, GLenum type = 0x%X, "
           "const GLvoid* pixels = 0x%0.8p)",
            target, level, xoffset, yoffset, width, height, format, type, pixels);
@@ -2354,7 +2347,7 @@ void GL_APIENTRY Uniform1f(GLint location, GLfloat x)
 
 void GL_APIENTRY Uniform1fv(GLint location, GLsizei count, const GLfloat* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2376,7 +2369,7 @@ void GL_APIENTRY Uniform1i(GLint location, GLint x)
 
 void GL_APIENTRY Uniform1iv(GLint location, GLsizei count, const GLint* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2400,7 +2393,7 @@ void GL_APIENTRY Uniform2f(GLint location, GLfloat x, GLfloat y)
 
 void GL_APIENTRY Uniform2fv(GLint location, GLsizei count, const GLfloat* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2424,7 +2417,7 @@ void GL_APIENTRY Uniform2i(GLint location, GLint x, GLint y)
 
 void GL_APIENTRY Uniform2iv(GLint location, GLsizei count, const GLint* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2448,7 +2441,7 @@ void GL_APIENTRY Uniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
 
 void GL_APIENTRY Uniform3fv(GLint location, GLsizei count, const GLfloat* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2472,7 +2465,7 @@ void GL_APIENTRY Uniform3i(GLint location, GLint x, GLint y, GLint z)
 
 void GL_APIENTRY Uniform3iv(GLint location, GLsizei count, const GLint* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2496,7 +2489,7 @@ void GL_APIENTRY Uniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfl
 
 void GL_APIENTRY Uniform4fv(GLint location, GLsizei count, const GLfloat* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2520,7 +2513,7 @@ void GL_APIENTRY Uniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
 
 void GL_APIENTRY Uniform4iv(GLint location, GLsizei count, const GLint* v)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)", location, count, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2537,7 +2530,7 @@ void GL_APIENTRY Uniform4iv(GLint location, GLsizei count, const GLint* v)
 
 void GL_APIENTRY UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -2555,7 +2548,7 @@ void GL_APIENTRY UniformMatrix2fv(GLint location, GLsizei count, GLboolean trans
 
 void GL_APIENTRY UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -2573,7 +2566,7 @@ void GL_APIENTRY UniformMatrix3fv(GLint location, GLsizei count, GLboolean trans
 
 void GL_APIENTRY UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -2591,7 +2584,7 @@ void GL_APIENTRY UniformMatrix4fv(GLint location, GLsizei count, GLboolean trans
 
 void GL_APIENTRY UseProgram(GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint program = %d)", program);
+    EVENT("(GLuint program = %d)", program);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2607,7 +2600,7 @@ void GL_APIENTRY UseProgram(GLuint program)
 
 void GL_APIENTRY ValidateProgram(GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint program = %d)", program);
+    EVENT("(GLuint program = %d)", program);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2625,7 +2618,7 @@ void GL_APIENTRY ValidateProgram(GLuint program)
 
 void GL_APIENTRY VertexAttrib1f(GLuint index, GLfloat x)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLfloat x = %f)", index, x);
+    EVENT("(GLuint index = %d, GLfloat x = %f)", index, x);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2642,7 +2635,7 @@ void GL_APIENTRY VertexAttrib1f(GLuint index, GLfloat x)
 
 void GL_APIENTRY VertexAttrib1fv(GLuint index, const GLfloat* values)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
+    EVENT("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2659,7 +2652,7 @@ void GL_APIENTRY VertexAttrib1fv(GLuint index, const GLfloat* values)
 
 void GL_APIENTRY VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f)", index, x, y);
+    EVENT("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f)", index, x, y);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2676,7 +2669,7 @@ void GL_APIENTRY VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
 
 void GL_APIENTRY VertexAttrib2fv(GLuint index, const GLfloat* values)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
+    EVENT("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2693,7 +2686,7 @@ void GL_APIENTRY VertexAttrib2fv(GLuint index, const GLfloat* values)
 
 void GL_APIENTRY VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f)", index, x, y, z);
+    EVENT("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f)", index, x, y, z);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2710,7 +2703,7 @@ void GL_APIENTRY VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
 
 void GL_APIENTRY VertexAttrib3fv(GLuint index, const GLfloat* values)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
+    EVENT("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2727,7 +2720,7 @@ void GL_APIENTRY VertexAttrib3fv(GLuint index, const GLfloat* values)
 
 void GL_APIENTRY VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f, GLfloat w = %f)", index, x, y, z, w);
+    EVENT("(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f, GLfloat w = %f)", index, x, y, z, w);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2744,7 +2737,7 @@ void GL_APIENTRY VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, G
 
 void GL_APIENTRY VertexAttrib4fv(GLuint index, const GLfloat* values)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
+    EVENT("(GLuint index = %d, const GLfloat* values = 0x%0.8p)", index, values);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2761,7 +2754,7 @@ void GL_APIENTRY VertexAttrib4fv(GLuint index, const GLfloat* values)
 
 void GL_APIENTRY VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr)
 {
-    EVENT_API_LOCK1("(GLuint index = %d, GLint size = %d, GLenum type = 0x%X, "
+    EVENT("(GLuint index = %d, GLint size = %d, GLenum type = 0x%X, "
           "GLboolean normalized = %u, GLsizei stride = %d, const GLvoid* ptr = 0x%0.8p)",
           index, size, type, normalized, stride, ptr);
 
@@ -2836,7 +2829,7 @@ void GL_APIENTRY VertexAttribPointer(GLuint index, GLint size, GLenum type, GLbo
 
 void GL_APIENTRY Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)", x, y, width, height);
+    EVENT("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)", x, y, width, height);
 
     Context *context = GetValidGlobalContext();
     if (context)
diff --git a/src/libGLESv2/entry_points_gles_2_0_ext.cpp b/src/libGLESv2/entry_points_gles_2_0_ext.cpp
index 7c0ebecbf..8805313a8 100644
--- a/src/libGLESv2/entry_points_gles_2_0_ext.cpp
+++ b/src/libGLESv2/entry_points_gles_2_0_ext.cpp
@@ -29,8 +29,6 @@
 #include "common/debug.h"
 #include "common/utilities.h"
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace gl
 {
 
@@ -49,7 +47,7 @@ void SetRobustLengthParam(GLsizei *length, GLsizei value)
 
 void GL_APIENTRY GenQueriesEXT(GLsizei n, GLuint *ids)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -68,7 +66,7 @@ void GL_APIENTRY GenQueriesEXT(GLsizei n, GLuint *ids)
 
 void GL_APIENTRY DeleteQueriesEXT(GLsizei n, const GLuint *ids)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, const GLuint *ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, const GLuint *ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -87,7 +85,7 @@ void GL_APIENTRY DeleteQueriesEXT(GLsizei n, const GLuint *ids)
 
 GLboolean GL_APIENTRY IsQueryEXT(GLuint id)
 {
-     EVENT_API_LOCK1("(GLuint id = %d)", id);
+    EVENT("(GLuint id = %d)", id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -100,7 +98,7 @@ GLboolean GL_APIENTRY IsQueryEXT(GLuint id)
 
 void GL_APIENTRY BeginQueryEXT(GLenum target, GLuint id)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint %d)", target, id);
+    EVENT("(GLenum target = 0x%X, GLuint %d)", target, id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -121,7 +119,7 @@ void GL_APIENTRY BeginQueryEXT(GLenum target, GLuint id)
 
 void GL_APIENTRY EndQueryEXT(GLenum target)
 {
-     EVENT_API_LOCK1("GLenum target = 0x%X)", target);
+    EVENT("GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -142,7 +140,7 @@ void GL_APIENTRY EndQueryEXT(GLenum target)
 
 void GL_APIENTRY QueryCounterEXT(GLuint id, GLenum target)
 {
-     EVENT_API_LOCK1("GLuint id = %d, GLenum target = 0x%X)", id, target);
+    EVENT("GLuint id = %d, GLenum target = 0x%X)", id, target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -163,7 +161,7 @@ void GL_APIENTRY QueryCounterEXT(GLuint id, GLenum target)
 
 void GL_APIENTRY GetQueryivEXT(GLenum target, GLenum pname, GLint *params)
 {
-     EVENT_API_LOCK1("GLenum target = 0x%X, GLenum pname = 0x%X, GLint *params = 0x%0.8p)", target, pname,
+    EVENT("GLenum target = 0x%X, GLenum pname = 0x%X, GLint *params = 0x%0.8p)", target, pname,
           params);
 
     Context *context = GetValidGlobalContext();
@@ -180,7 +178,7 @@ void GL_APIENTRY GetQueryivEXT(GLenum target, GLenum pname, GLint *params)
 
 void GL_APIENTRY GetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
 {
-     EVENT_API_LOCK1("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)", id, pname, params);
+    EVENT("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)", id, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -196,7 +194,7 @@ void GL_APIENTRY GetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
 
 void GL_APIENTRY GetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
 {
-     EVENT_API_LOCK1("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)", id, pname, params);
+    EVENT("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)", id, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -212,7 +210,7 @@ void GL_APIENTRY GetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
 
 void GL_APIENTRY GetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)
 {
-     EVENT_API_LOCK1("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)", id, pname, params);
+    EVENT("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)", id, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -228,7 +226,7 @@ void GL_APIENTRY GetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)
 
 void GL_APIENTRY GetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params)
 {
-     EVENT_API_LOCK1("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)", id, pname, params);
+    EVENT("(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)", id, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -244,7 +242,7 @@ void GL_APIENTRY GetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *param
 
 void GL_APIENTRY DeleteFencesNV(GLsizei n, const GLuint *fences)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* fences = 0x%0.8p)", n, fences);
+    EVENT("(GLsizei n = %d, const GLuint* fences = 0x%0.8p)", n, fences);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -267,7 +265,7 @@ void GL_APIENTRY DrawArraysInstancedANGLE(GLenum mode,
                                           GLsizei count,
                                           GLsizei primcount)
 {
-     EVENT_API_LOCK1("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei primcount = %d)",
+    EVENT("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei primcount = %d)",
           mode, first, count, primcount);
 
     Context *context = GetValidGlobalContext();
@@ -293,7 +291,7 @@ void GL_APIENTRY DrawElementsInstancedANGLE(GLenum mode,
                                             const GLvoid *indices,
                                             GLsizei primcount)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = "
         "0x%0.8p, GLsizei primcount = %d)",
         mode, count, type, indices, primcount);
@@ -320,7 +318,7 @@ void GL_APIENTRY DrawElementsInstancedANGLE(GLenum mode,
 
 void GL_APIENTRY FinishFenceNV(GLuint fence)
 {
-     EVENT_API_LOCK1("(GLuint fence = %d)", fence);
+    EVENT("(GLuint fence = %d)", fence);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -345,7 +343,7 @@ void GL_APIENTRY FinishFenceNV(GLuint fence)
 
 void GL_APIENTRY GenFencesNV(GLsizei n, GLuint *fences)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, GLuint* fences = 0x%0.8p)", n, fences);
+    EVENT("(GLsizei n = %d, GLuint* fences = 0x%0.8p)", n, fences);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -365,7 +363,7 @@ void GL_APIENTRY GenFencesNV(GLsizei n, GLuint *fences)
 
 void GL_APIENTRY GetFenceivNV(GLuint fence, GLenum pname, GLint *params)
 {
-     EVENT_API_LOCK1("(GLuint fence = %d, GLenum pname = 0x%X, GLint *params = 0x%0.8p)", fence, pname, params);
+    EVENT("(GLuint fence = %d, GLenum pname = 0x%X, GLint *params = 0x%0.8p)", fence, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -422,7 +420,7 @@ void GL_APIENTRY GetFenceivNV(GLuint fence, GLenum pname, GLint *params)
 
 GLenum GL_APIENTRY GetGraphicsResetStatusEXT(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetGlobalContext();
 
@@ -436,7 +434,7 @@ GLenum GL_APIENTRY GetGraphicsResetStatusEXT(void)
 
 void GL_APIENTRY GetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source)
 {
-     EVENT_API_LOCK1("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)",
+    EVENT("(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)",
           shader, bufsize, length, source);
 
     Context *context = GetValidGlobalContext();
@@ -462,7 +460,7 @@ void GL_APIENTRY GetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize,
 
 void GL_APIENTRY GetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
 {
-     EVENT_API_LOCK1("(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLfloat* params = 0x%0.8p)",
+    EVENT("(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLfloat* params = 0x%0.8p)",
           program, location, bufSize, params);
 
     Context *context = GetValidGlobalContext();
@@ -482,7 +480,7 @@ void GL_APIENTRY GetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSiz
 
 void GL_APIENTRY GetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint* params)
 {
-     EVENT_API_LOCK1("(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLint* params = 0x%0.8p)",
+    EVENT("(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLint* params = 0x%0.8p)",
           program, location, bufSize, params);
 
     Context *context = GetValidGlobalContext();
@@ -502,7 +500,7 @@ void GL_APIENTRY GetnUniformivEXT(GLuint program, GLint location, GLsizei bufSiz
 
 GLboolean GL_APIENTRY IsFenceNV(GLuint fence)
 {
-     EVENT_API_LOCK1("(GLuint fence = %d)", fence);
+    EVENT("(GLuint fence = %d)", fence);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -526,7 +524,7 @@ void GL_APIENTRY ReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height,
                                 GLenum format, GLenum type, GLsizei bufSize,
                                 GLvoid *data)
 {
-     EVENT_API_LOCK1("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
+    EVENT("(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
           "GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufSize = 0x%d, GLvoid *data = 0x%0.8p)",
           x, y, width, height, format, type, bufSize, data);
 
@@ -545,7 +543,7 @@ void GL_APIENTRY ReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height,
 
 void GL_APIENTRY RenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
+    EVENT("(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
         target, samples, internalformat, width, height);
 
     Context *context = GetValidGlobalContext();
@@ -569,7 +567,7 @@ void GL_APIENTRY RenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samp
 
 void GL_APIENTRY SetFenceNV(GLuint fence, GLenum condition)
 {
-     EVENT_API_LOCK1("(GLuint fence = %d, GLenum condition = 0x%X)", fence, condition);
+    EVENT("(GLuint fence = %d, GLenum condition = 0x%X)", fence, condition);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -599,7 +597,7 @@ void GL_APIENTRY SetFenceNV(GLuint fence, GLenum condition)
 
 GLboolean GL_APIENTRY TestFenceNV(GLuint fence)
 {
-     EVENT_API_LOCK1("(GLuint fence = %d)", fence);
+    EVENT("(GLuint fence = %d)", fence);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -634,7 +632,7 @@ GLboolean GL_APIENTRY TestFenceNV(GLuint fence)
 
 void GL_APIENTRY TexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
+    EVENT("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
            target, levels, internalformat, width, height);
 
     Context *context = GetValidGlobalContext();
@@ -673,7 +671,7 @@ void GL_APIENTRY TexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalf
 
 void GL_APIENTRY VertexAttribDivisorANGLE(GLuint index, GLuint divisor)
 {
-     EVENT_API_LOCK1("(GLuint index = %d, GLuint divisor = %d)", index, divisor);
+    EVENT("(GLuint index = %d, GLuint divisor = %d)", index, divisor);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -706,7 +704,7 @@ void GL_APIENTRY VertexAttribDivisorANGLE(GLuint index, GLuint divisor)
 void GL_APIENTRY BlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
                           GLbitfield mask, GLenum filter)
 {
-     EVENT_API_LOCK1("(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, "
+    EVENT("(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, "
           "GLint dstX0 = %d, GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, "
           "GLbitfield mask = 0x%X, GLenum filter = 0x%X)",
           srcX0, srcY0, srcX1, srcX1, dstX0, dstY0, dstX1, dstY1, mask, filter);
@@ -728,7 +726,7 @@ void GL_APIENTRY BlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLi
 
 void GL_APIENTRY DiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei numAttachments = %d, attachments = 0x%0.8p)", target, numAttachments, attachments);
+    EVENT("(GLenum target = 0x%X, GLsizei numAttachments = %d, attachments = 0x%0.8p)", target, numAttachments, attachments);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -746,7 +744,7 @@ void GL_APIENTRY DiscardFramebufferEXT(GLenum target, GLsizei numAttachments, co
 void GL_APIENTRY TexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth,
                    GLint border, GLenum format, GLenum type, const GLvoid* pixels)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
           "GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, GLint border = %d, "
           "GLenum format = 0x%X, GLenum type = 0x%x, const GLvoid* pixels = 0x%0.8p)",
           target, level, internalformat, width, height, depth, border, format, type, pixels);
@@ -756,7 +754,7 @@ void GL_APIENTRY TexImage3DOES(GLenum target, GLint level, GLenum internalformat
 
 void GL_APIENTRY GetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
 {
-     EVENT_API_LOCK1("(GLenum program = 0x%X, bufSize = %d, length = 0x%0.8p, binaryFormat = 0x%0.8p, binary = 0x%0.8p)",
+    EVENT("(GLenum program = 0x%X, bufSize = %d, length = 0x%0.8p, binaryFormat = 0x%0.8p, binary = 0x%0.8p)",
           program, bufSize, length, binaryFormat, binary);
 
     Context *context = GetValidGlobalContext();
@@ -781,7 +779,7 @@ void GL_APIENTRY GetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *l
 
 void GL_APIENTRY ProgramBinaryOES(GLuint program, GLenum binaryFormat, const void *binary, GLint length)
 {
-     EVENT_API_LOCK1("(GLenum program = 0x%X, binaryFormat = 0x%x, binary = 0x%0.8p, length = %d)",
+    EVENT("(GLenum program = 0x%X, binaryFormat = 0x%x, binary = 0x%0.8p, length = %d)",
           program, binaryFormat, binary, length);
 
     Context *context = GetValidGlobalContext();
@@ -806,7 +804,7 @@ void GL_APIENTRY ProgramBinaryOES(GLuint program, GLenum binaryFormat, const voi
 
 void GL_APIENTRY DrawBuffersEXT(GLsizei n, const GLenum *bufs)
 {
-     EVENT_API_LOCK1("(GLenum n = %d, bufs = 0x%0.8p)", n, bufs);
+    EVENT("(GLenum n = %d, bufs = 0x%0.8p)", n, bufs);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -822,7 +820,7 @@ void GL_APIENTRY DrawBuffersEXT(GLsizei n, const GLenum *bufs)
 
 void GL_APIENTRY GetBufferPointervOES(GLenum target, GLenum pname, void** params)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -839,7 +837,7 @@ void GL_APIENTRY GetBufferPointervOES(GLenum target, GLenum pname, void** params
 
 void *GL_APIENTRY MapBufferOES(GLenum target, GLenum access)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLbitfield access = 0x%X)", target, access);
+    EVENT("(GLenum target = 0x%X, GLbitfield access = 0x%X)", target, access);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -857,7 +855,7 @@ void *GL_APIENTRY MapBufferOES(GLenum target, GLenum access)
 
 GLboolean GL_APIENTRY UnmapBufferOES(GLenum target)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X)", target);
+    EVENT("(GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -875,7 +873,7 @@ GLboolean GL_APIENTRY UnmapBufferOES(GLenum target)
 
 void *GL_APIENTRY MapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)",
+    EVENT("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)",
           target, offset, length, access);
 
     Context *context = GetValidGlobalContext();
@@ -895,7 +893,7 @@ void *GL_APIENTRY MapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr l
 
 void GL_APIENTRY FlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)", target, offset, length);
+    EVENT("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)", target, offset, length);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -912,7 +910,7 @@ void GL_APIENTRY FlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsiz
 
 void GL_APIENTRY InsertEventMarkerEXT(GLsizei length, const char *marker)
 {
-    // Don't run an  EVENT_API_LOCK1() macro on the EXT_debug_marker entry points.
+    // Don't run an EVENT() macro on the EXT_debug_marker entry points.
     // It can interfere with the debug events being set by the caller.
 
     Context *context = GetValidGlobalContext();
@@ -937,7 +935,7 @@ void GL_APIENTRY InsertEventMarkerEXT(GLsizei length, const char *marker)
 
 void GL_APIENTRY PushGroupMarkerEXT(GLsizei length, const char *marker)
 {
-    // Don't run an  EVENT_API_LOCK1() macro on the EXT_debug_marker entry points.
+    // Don't run an EVENT() macro on the EXT_debug_marker entry points.
     // It can interfere with the debug events being set by the caller.
 
     Context *context = GetValidGlobalContext();
@@ -971,7 +969,7 @@ void GL_APIENTRY PushGroupMarkerEXT(GLsizei length, const char *marker)
 
 void GL_APIENTRY PopGroupMarkerEXT()
 {
-    // Don't run an  EVENT_API_LOCK1() macro on the EXT_debug_marker entry points.
+    // Don't run an EVENT() macro on the EXT_debug_marker entry points.
     // It can interfere with the debug events being set by the caller.
 
     Context *context = GetValidGlobalContext();
@@ -991,7 +989,7 @@ void GL_APIENTRY PopGroupMarkerEXT()
 
 ANGLE_EXPORT void GL_APIENTRY EGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)", target, image);
+    EVENT("(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)", target, image);
 
     egl::Thread *thread = egl::GetCurrentThread();
     Context *context    = thread->getValidContext();
@@ -1017,7 +1015,7 @@ ANGLE_EXPORT void GL_APIENTRY EGLImageTargetTexture2DOES(GLenum target, GLeglIma
 ANGLE_EXPORT void GL_APIENTRY EGLImageTargetRenderbufferStorageOES(GLenum target,
                                                                    GLeglImageOES image)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)", target, image);
+    EVENT("(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)", target, image);
 
     egl::Thread *thread = egl::GetCurrentThread();
     Context *context    = thread->getValidContext();
@@ -1042,7 +1040,7 @@ ANGLE_EXPORT void GL_APIENTRY EGLImageTargetRenderbufferStorageOES(GLenum target
 
 void GL_APIENTRY BindVertexArrayOES(GLuint array)
 {
-     EVENT_API_LOCK1("(GLuint array = %u)", array);
+    EVENT("(GLuint array = %u)", array);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1058,7 +1056,7 @@ void GL_APIENTRY BindVertexArrayOES(GLuint array)
 
 void GL_APIENTRY DeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)", n, arrays);
+    EVENT("(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)", n, arrays);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1080,7 +1078,7 @@ void GL_APIENTRY DeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
 
 void GL_APIENTRY GenVertexArraysOES(GLsizei n, GLuint *arrays)
 {
-     EVENT_API_LOCK1("(GLsizei n = %d, GLuint* arrays = 0x%0.8p)", n, arrays);
+    EVENT("(GLsizei n = %d, GLuint* arrays = 0x%0.8p)", n, arrays);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1099,7 +1097,7 @@ void GL_APIENTRY GenVertexArraysOES(GLsizei n, GLuint *arrays)
 
 GLboolean GL_APIENTRY IsVertexArrayOES(GLuint array)
 {
-     EVENT_API_LOCK1("(GLuint array = %u)", array);
+    EVENT("(GLuint array = %u)", array);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1129,7 +1127,7 @@ void GL_APIENTRY DebugMessageControlKHR(GLenum source,
                                         const GLuint *ids,
                                         GLboolean enabled)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum source = 0x%X, GLenum type = 0x%X, GLenum severity = 0x%X, GLsizei count = %d, "
         "GLint *ids = 0x%0.8p, GLboolean enabled = %d)",
         source, type, severity, count, ids, enabled);
@@ -1153,7 +1151,7 @@ void GL_APIENTRY DebugMessageInsertKHR(GLenum source,
                                        GLsizei length,
                                        const GLchar *buf)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum source = 0x%X, GLenum type = 0x%X, GLint id = %d, GLenum severity = 0x%X, GLsizei "
         "length = %d, const GLchar *buf = 0x%0.8p)",
         source, type, id, severity, length, buf);
@@ -1172,7 +1170,7 @@ void GL_APIENTRY DebugMessageInsertKHR(GLenum source,
 
 void GL_APIENTRY DebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam)
 {
-     EVENT_API_LOCK1("(GLDEBUGPROCKHR callback = 0x%0.8p, const void *userParam = 0x%0.8p)", callback,
+    EVENT("(GLDEBUGPROCKHR callback = 0x%0.8p, const void *userParam = 0x%0.8p)", callback,
           userParam);
 
     Context *context = GetValidGlobalContext();
@@ -1196,7 +1194,7 @@ GLuint GL_APIENTRY GetDebugMessageLogKHR(GLuint count,
                                          GLsizei *lengths,
                                          GLchar *messageLog)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei count = %d, GLsizei bufSize = %d, GLenum *sources, GLenum *types = 0x%0.8p, "
         "GLuint *ids = 0x%0.8p, GLenum *severities = 0x%0.8p, GLsizei *lengths = 0x%0.8p, GLchar "
         "*messageLog = 0x%0.8p)",
@@ -1220,7 +1218,7 @@ GLuint GL_APIENTRY GetDebugMessageLogKHR(GLuint count,
 
 void GL_APIENTRY PushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum source = 0x%X, GLuint id = 0x%X, GLsizei length = %d, const GLchar *message = "
         "0x%0.8p)",
         source, id, length, message);
@@ -1240,7 +1238,7 @@ void GL_APIENTRY PushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, con
 
 void GL_APIENTRY PopDebugGroupKHR(void)
 {
-     EVENT_API_LOCK1("()");
+    EVENT("()");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1256,7 +1254,7 @@ void GL_APIENTRY PopDebugGroupKHR(void)
 
 void GL_APIENTRY ObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum identifier = 0x%X, GLuint name = %u, GLsizei length = %d, const GLchar *label = "
         "0x%0.8p)",
         identifier, name, length, label);
@@ -1276,7 +1274,7 @@ void GL_APIENTRY ObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length,
 void GL_APIENTRY
 GetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum identifier = 0x%X, GLuint name = %u, GLsizei bufSize = %d, GLsizei *length = "
         "0x%0.8p, GLchar *label = 0x%0.8p)",
         identifier, name, bufSize, length, label);
@@ -1295,7 +1293,7 @@ GetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *leng
 
 void GL_APIENTRY ObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label)
 {
-     EVENT_API_LOCK1("(const void *ptr = 0x%0.8p, GLsizei length = %d, const GLchar *label = 0x%0.8p)", ptr,
+    EVENT("(const void *ptr = 0x%0.8p, GLsizei length = %d, const GLchar *label = 0x%0.8p)", ptr,
           length, label);
 
     Context *context = GetValidGlobalContext();
@@ -1315,7 +1313,7 @@ void GL_APIENTRY GetObjectPtrLabelKHR(const void *ptr,
                                       GLsizei *length,
                                       GLchar *label)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(const void *ptr = 0x%0.8p, GLsizei bufSize = %d, GLsizei *length = 0x%0.8p, GLchar "
         "*label = 0x%0.8p)",
         ptr, bufSize, length, label);
@@ -1334,7 +1332,7 @@ void GL_APIENTRY GetObjectPtrLabelKHR(const void *ptr,
 
 void GL_APIENTRY GetPointervKHR(GLenum pname, void **params)
 {
-     EVENT_API_LOCK1("(GLenum pname = 0x%X, void **params = 0x%0.8p)", pname, params);
+    EVENT("(GLenum pname = 0x%X, void **params = 0x%0.8p)", pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1352,7 +1350,7 @@ ANGLE_EXPORT void GL_APIENTRY BindUniformLocationCHROMIUM(GLuint program,
                                                           GLint location,
                                                           const GLchar *name)
 {
-     EVENT_API_LOCK1("(GLuint program = %u, GLint location = %d, const GLchar *name = 0x%0.8p)", program,
+    EVENT("(GLuint program = %u, GLint location = %d, const GLchar *name = 0x%0.8p)", program,
           location, name);
 
     Context *context = GetValidGlobalContext();
@@ -1369,7 +1367,7 @@ ANGLE_EXPORT void GL_APIENTRY BindUniformLocationCHROMIUM(GLuint program,
 
 ANGLE_EXPORT void GL_APIENTRY CoverageModulationCHROMIUM(GLenum components)
 {
-     EVENT_API_LOCK1("(GLenum components = %u)", components);
+    EVENT("(GLenum components = %u)", components);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1385,7 +1383,7 @@ ANGLE_EXPORT void GL_APIENTRY CoverageModulationCHROMIUM(GLenum components)
 // CHROMIUM_path_rendering
 ANGLE_EXPORT void GL_APIENTRY MatrixLoadfCHROMIUM(GLenum matrixMode, const GLfloat *matrix)
 {
-     EVENT_API_LOCK1("(GLenum matrixMode = %u)", matrixMode);
+    EVENT("(GLenum matrixMode = %u)", matrixMode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1400,7 +1398,7 @@ ANGLE_EXPORT void GL_APIENTRY MatrixLoadfCHROMIUM(GLenum matrixMode, const GLflo
 
 ANGLE_EXPORT void GL_APIENTRY MatrixLoadIdentityCHROMIUM(GLenum matrixMode)
 {
-     EVENT_API_LOCK1("(GLenum matrixMode = %u)", matrixMode);
+    EVENT("(GLenum matrixMode = %u)", matrixMode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1415,7 +1413,7 @@ ANGLE_EXPORT void GL_APIENTRY MatrixLoadIdentityCHROMIUM(GLenum matrixMode)
 
 ANGLE_EXPORT GLuint GL_APIENTRY GenPathsCHROMIUM(GLsizei range)
 {
-     EVENT_API_LOCK1("(GLsizei range = %d)", range);
+    EVENT("(GLsizei range = %d)", range);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1431,7 +1429,7 @@ ANGLE_EXPORT GLuint GL_APIENTRY GenPathsCHROMIUM(GLsizei range)
 
 ANGLE_EXPORT void GL_APIENTRY DeletePathsCHROMIUM(GLuint first, GLsizei range)
 {
-     EVENT_API_LOCK1("(GLuint first = %u, GLsizei range = %d)", first, range);
+    EVENT("(GLuint first = %u, GLsizei range = %d)", first, range);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1446,7 +1444,7 @@ ANGLE_EXPORT void GL_APIENTRY DeletePathsCHROMIUM(GLuint first, GLsizei range)
 
 ANGLE_EXPORT GLboolean GL_APIENTRY IsPathCHROMIUM(GLuint path)
 {
-     EVENT_API_LOCK1("(GLuint path = %u)", path);
+    EVENT("(GLuint path = %u)", path);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1467,7 +1465,7 @@ ANGLE_EXPORT void GL_APIENTRY PathCommandsCHROMIUM(GLuint path,
                                                    GLenum coordType,
                                                    const void *coords)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint path = %u, GLsizei numCommands = %d, commands = %p, "
         "GLsizei numCoords = %d, GLenum coordType = %u, void* coords = %p)",
         path, numCommands, commands, numCoords, coordType, coords);
@@ -1489,7 +1487,7 @@ ANGLE_EXPORT void GL_APIENTRY PathCommandsCHROMIUM(GLuint path,
 
 ANGLE_EXPORT void GL_APIENTRY PathParameterfCHROMIUM(GLuint path, GLenum pname, GLfloat value)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum pname = %u, GLfloat value = %f)", path, pname, value);
+    EVENT("(GLuint path = %u, GLenum pname = %u, GLfloat value = %f)", path, pname, value);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1509,7 +1507,7 @@ ANGLE_EXPORT void GL_APIENTRY PathParameteriCHROMIUM(GLuint path, GLenum pname,
 
 ANGLE_EXPORT void GL_APIENTRY GetPathParameterfCHROMIUM(GLuint path, GLenum pname, GLfloat *value)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum pname = %u)", path, pname);
+    EVENT("(GLuint path = %u, GLenum pname = %u)", path, pname);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1532,7 +1530,7 @@ ANGLE_EXPORT void GL_APIENTRY GetPathParameteriCHROMIUM(GLuint path, GLenum pnam
 
 ANGLE_EXPORT void GL_APIENTRY PathStencilFuncCHROMIUM(GLenum func, GLint ref, GLuint mask)
 {
-     EVENT_API_LOCK1("(GLenum func = %u, GLint ref = %d, GLuint mask = %u)", func, ref, mask);
+    EVENT("(GLenum func = %u, GLint ref = %d, GLuint mask = %u)", func, ref, mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1547,7 +1545,7 @@ ANGLE_EXPORT void GL_APIENTRY PathStencilFuncCHROMIUM(GLenum func, GLint ref, GL
 
 ANGLE_EXPORT void GL_APIENTRY StencilFillPathCHROMIUM(GLuint path, GLenum fillMode, GLuint mask)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum fillMode = %u, GLuint mask = %u)", path, fillMode, mask);
+    EVENT("(GLuint path = %u, GLenum fillMode = %u, GLuint mask = %u)", path, fillMode, mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1562,7 +1560,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilFillPathCHROMIUM(GLuint path, GLenum fillMo
 
 ANGLE_EXPORT void GL_APIENTRY StencilStrokePathCHROMIUM(GLuint path, GLint reference, GLuint mask)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLint ference = %d, GLuint mask = %u)", path, reference, mask);
+    EVENT("(GLuint path = %u, GLint ference = %d, GLuint mask = %u)", path, reference, mask);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1578,7 +1576,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilStrokePathCHROMIUM(GLuint path, GLint refer
 
 ANGLE_EXPORT void GL_APIENTRY CoverFillPathCHROMIUM(GLuint path, GLenum coverMode)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum coverMode = %u)", path, coverMode);
+    EVENT("(GLuint path = %u, GLenum coverMode = %u)", path, coverMode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1593,7 +1591,7 @@ ANGLE_EXPORT void GL_APIENTRY CoverFillPathCHROMIUM(GLuint path, GLenum coverMod
 
 ANGLE_EXPORT void GL_APIENTRY CoverStrokePathCHROMIUM(GLuint path, GLenum coverMode)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum coverMode = %u)", path, coverMode);
+    EVENT("(GLuint path = %u, GLenum coverMode = %u)", path, coverMode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1611,7 +1609,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilThenCoverFillPathCHROMIUM(GLuint path,
                                                                GLuint mask,
                                                                GLenum coverMode)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLenum fillMode = %u, GLuint mask = %u, GLenum coverMode = %u)", path,
+    EVENT("(GLuint path = %u, GLenum fillMode = %u, GLuint mask = %u, GLenum coverMode = %u)", path,
           fillMode, mask, coverMode);
 
     Context *context = GetValidGlobalContext();
@@ -1631,7 +1629,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilThenCoverStrokePathCHROMIUM(GLuint path,
                                                                  GLuint mask,
                                                                  GLenum coverMode)
 {
-     EVENT_API_LOCK1("(GLuint path = %u, GLint reference = %d, GLuint mask = %u, GLenum coverMode = %u)", path,
+    EVENT("(GLuint path = %u, GLint reference = %d, GLuint mask = %u, GLenum coverMode = %u)", path,
           reference, mask, coverMode);
 
     Context *context = GetValidGlobalContext();
@@ -1654,7 +1652,7 @@ ANGLE_EXPORT void GL_APIENTRY CoverFillPathInstancedCHROMIUM(GLsizei numPaths,
                                                              GLenum transformType,
                                                              const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %d, GLenum pathNameType = %u, const void *paths = %p "
         "GLuint pathBase = %u, GLenum coverMode = %u, GLenum transformType = %u "
         "const GLfloat *transformValues = %p)",
@@ -1682,7 +1680,7 @@ ANGLE_EXPORT void GL_APIENTRY CoverStrokePathInstancedCHROMIUM(GLsizei numPaths,
                                                                GLenum transformType,
                                                                const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %d, GLenum pathNameType = %u, const void *paths = %p "
         "GLuint pathBase = %u, GLenum coverMode = %u, GLenum transformType = %u "
         "const GLfloat *transformValues = %p)",
@@ -1711,7 +1709,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilStrokePathInstancedCHROMIUM(GLsizei numPath
                                                                  GLenum transformType,
                                                                  const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %u, GLenum pathNameType = %u, const void *paths = %p "
         "GLuint pathBase = %u, GLint reference = %d GLuint mask = %u GLenum transformType = %u "
         "const GLfloat *transformValues = %p)",
@@ -1740,7 +1738,7 @@ ANGLE_EXPORT void GL_APIENTRY StencilFillPathInstancedCHROMIUM(GLsizei numPaths,
                                                                GLenum transformType,
                                                                const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %u, GLenum pathNameType = %u const void *paths = %p "
         "GLuint pathBase = %u, GLenum fillMode = %u, GLuint mask = %u, GLenum transformType = %u "
         "const GLfloat *transformValues = %p)",
@@ -1771,7 +1769,7 @@ StencilThenCoverFillPathInstancedCHROMIUM(GLsizei numPaths,
                                           GLenum transformType,
                                           const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %u, GLenum pathNameType = %u const void *paths = %p "
         "GLuint pathBase = %u, GLenum coverMode = %u, GLuint mask = %u, GLenum transformType = %u "
         "const GLfloat *transformValues = %p)",
@@ -1804,7 +1802,7 @@ StencilThenCoverStrokePathInstancedCHROMIUM(GLsizei numPaths,
                                             GLenum transformType,
                                             const GLfloat *transformValues)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLsizei numPaths = %u, GLenum pathNameType = %u, const void *paths = %p "
         "GLuint pathBase = %u GLenum coverMode = %u GLint reference = %d GLuint mask = %u GLenum "
         "transformType = %u "
@@ -1832,7 +1830,7 @@ ANGLE_EXPORT void GL_APIENTRY BindFragmentInputLocationCHROMIUM(GLuint program,
                                                                 GLint location,
                                                                 const GLchar *name)
 {
-     EVENT_API_LOCK1("(GLuint program = %u, GLint location = %d, const GLchar *name = %p)", program, location,
+    EVENT("(GLuint program = %u, GLint location = %d, const GLchar *name = %p)", program, location,
           name);
 
     Context *context = GetValidGlobalContext();
@@ -1853,7 +1851,7 @@ ANGLE_EXPORT void GL_APIENTRY ProgramPathFragmentInputGenCHROMIUM(GLuint program
                                                                   GLint components,
                                                                   const GLfloat *coeffs)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location %d, GLenum genMode = %u, GLint components = %d, "
         "const GLfloat * coeffs = %p)",
         program, location, genMode, components, coeffs);
@@ -1879,7 +1877,7 @@ ANGLE_EXPORT void GL_APIENTRY CopyTextureCHROMIUM(GLuint sourceId,
                                                   GLboolean unpackPremultiplyAlpha,
                                                   GLboolean unpackUnmultiplyAlpha)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sourceId = %u, GLuint destId = %u, GLint internalFormat = 0x%X, GLenum destType = "
         "0x%X, GLboolean unpackFlipY = %u, GLboolean unpackPremultiplyAlpha = %u, GLboolean "
         "unpackUnmultiplyAlpha = %u)",
@@ -1914,7 +1912,7 @@ ANGLE_EXPORT void GL_APIENTRY CopySubTextureCHROMIUM(GLuint sourceId,
                                                      GLboolean unpackPremultiplyAlpha,
                                                      GLboolean unpackUnmultiplyAlpha)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sourceId = %u, GLuint destId = %u, , GLboolean unpackFlipY = %u, GLint xoffset = "
         "%d, GLint yoffset = %d, GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = "
         "%d, GLboolean unpackPremultiplyAlpha = %u, GLboolean unpackUnmultiplyAlpha = %u)",
@@ -1939,7 +1937,7 @@ ANGLE_EXPORT void GL_APIENTRY CopySubTextureCHROMIUM(GLuint sourceId,
 
 ANGLE_EXPORT void GL_APIENTRY CompressedCopyTextureCHROMIUM(GLuint sourceId, GLuint destId)
 {
-     EVENT_API_LOCK1("(GLuint sourceId = %u, GLuint destId = %u)", sourceId, destId);
+    EVENT("(GLuint sourceId = %u, GLuint destId = %u)", sourceId, destId);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1956,7 +1954,7 @@ ANGLE_EXPORT void GL_APIENTRY CompressedCopyTextureCHROMIUM(GLuint sourceId, GLu
 
 GL_APICALL void GL_APIENTRY RequestExtensionANGLE(const GLchar *name)
 {
-     EVENT_API_LOCK1("(const GLchar *name = %p)", name);
+    EVENT("(const GLchar *name = %p)", name);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1975,7 +1973,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBooleanvRobustANGLE(GLenum pname,
                                                      GLsizei *length,
                                                      GLboolean *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLboolean* params "
         "= 0x%0.8p)",
         pname, bufSize, length, params);
@@ -2009,7 +2007,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBufferParameterivRobustANGLE(GLenum target,
                                                               GLsizei *length,
                                                               GLint *params)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname,
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname,
           params);
 
     Context *context = GetValidGlobalContext();
@@ -2033,7 +2031,7 @@ ANGLE_EXPORT void GL_APIENTRY GetFloatvRobustANGLE(GLenum pname,
                                                    GLsizei *length,
                                                    GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLfloat* params = "
         "0x%0.8p)",
         pname, bufSize, length, params);
@@ -2068,7 +2066,7 @@ ANGLE_EXPORT void GL_APIENTRY GetFramebufferAttachmentParameterivRobustANGLE(GLe
                                                                              GLsizei *length,
                                                                              GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum pname = 0x%X,  GLsizei bufsize = "
         "%d, GLsizei* length = 0x%0.8p, GLint* params = 0x%0.8p)",
         target, attachment, pname, bufSize, length, params);
@@ -2094,7 +2092,7 @@ ANGLE_EXPORT void GL_APIENTRY GetIntegervRobustANGLE(GLenum pname,
                                                      GLsizei *length,
                                                      GLint *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLint* params = "
         "0x%0.8p)",
         pname, bufSize, length, data);
@@ -2127,7 +2125,7 @@ ANGLE_EXPORT void GL_APIENTRY GetProgramivRobustANGLE(GLuint program,
                                                       GLsizei *length,
                                                       GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %d, GLenum pname = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint* params = 0x%0.8p)",
         program, pname, bufSize, length, params);
@@ -2153,7 +2151,7 @@ ANGLE_EXPORT void GL_APIENTRY GetRenderbufferParameterivRobustANGLE(GLenum targe
                                                                     GLsizei *length,
                                                                     GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -2177,7 +2175,7 @@ ANGLE_EXPORT void GL_APIENTRY GetRenderbufferParameterivRobustANGLE(GLenum targe
 ANGLE_EXPORT void GL_APIENTRY
 GetShaderivRobustANGLE(GLuint shader, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint shader = %d, GLenum pname = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint* params = 0x%0.8p)",
         shader, pname, bufSize, length, params);
@@ -2203,7 +2201,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexParameterfvRobustANGLE(GLenum target,
                                                            GLsizei *length,
                                                            GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLfloat* params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -2230,7 +2228,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexParameterivRobustANGLE(GLenum target,
                                                            GLsizei *length,
                                                            GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLfloat* params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -2257,7 +2255,7 @@ ANGLE_EXPORT void GL_APIENTRY GetUniformfvRobustANGLE(GLuint program,
                                                       GLsizei *length,
                                                       GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %d, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLfloat* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -2286,7 +2284,7 @@ ANGLE_EXPORT void GL_APIENTRY GetUniformivRobustANGLE(GLuint program,
                                                       GLsizei *length,
                                                       GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %d, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -2315,7 +2313,7 @@ ANGLE_EXPORT void GL_APIENTRY GetVertexAttribfvRobustANGLE(GLuint index,
                                                            GLsizei *length,
                                                            GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint index = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLfloat* params = 0x%0.8p)",
         index, pname, bufSize, length, params);
@@ -2345,7 +2343,7 @@ ANGLE_EXPORT void GL_APIENTRY GetVertexAttribivRobustANGLE(GLuint index,
                                                            GLsizei *length,
                                                            GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint index = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint* params = 0x%0.8p)",
         index, pname, bufSize, length, params);
@@ -2375,7 +2373,7 @@ ANGLE_EXPORT void GL_APIENTRY GetVertexAttribPointervRobustANGLE(GLuint index,
                                                                  GLsizei *length,
                                                                  void **pointer)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint index = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLvoid** pointer = 0x%0.8p)",
         index, pname, bufSize, length, pointer);
@@ -2407,7 +2405,7 @@ ANGLE_EXPORT void GL_APIENTRY ReadPixelsRobustANGLE(GLint x,
                                                     GLsizei *length,
                                                     void *pixels)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
         "GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLvoid* pixels = 0x%0.8p)",
@@ -2440,7 +2438,7 @@ ANGLE_EXPORT void GL_APIENTRY TexImage2DRobustANGLE(GLenum target,
                                                     GLsizei bufSize,
                                                     const void *pixels)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
         "GLsizei height = %d, GLint border = %d, GLenum format = 0x%X, GLenum type = 0x%X, GLsizei "
         "bufSize = %d, const GLvoid* pixels = 0x%0.8p)",
@@ -2465,7 +2463,7 @@ ANGLE_EXPORT void GL_APIENTRY TexParameterfvRobustANGLE(GLenum target,
                                                         GLsizei bufSize,
                                                         const GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLfloat* params = "
         "0x%0.8p)",
         target, pname, bufSize, params);
@@ -2488,7 +2486,7 @@ ANGLE_EXPORT void GL_APIENTRY TexParameterivRobustANGLE(GLenum target,
                                                         GLsizei bufSize,
                                                         const GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLfloat* params = "
         "0x%0.8p)",
         target, pname, bufSize, params);
@@ -2517,7 +2515,7 @@ ANGLE_EXPORT void GL_APIENTRY TexSubImage2DRobustANGLE(GLenum target,
                                                        GLsizei bufSize,
                                                        const void *pixels)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
         "GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, GLenum type = 0x%X, "
         "GLsizei bufsize = %d, const GLvoid* pixels = 0x%0.8p)",
@@ -2549,7 +2547,7 @@ ANGLE_EXPORT void GL_APIENTRY TexImage3DRobustANGLE(GLenum target,
                                                     GLsizei bufSize,
                                                     const void *pixels)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
         "GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLenum format = 0x%X, "
         "GLenum type = 0x%X, GLsizei bufsize = %d, const GLvoid* pixels = 0x%0.8p)",
@@ -2582,7 +2580,7 @@ ANGLE_EXPORT void GL_APIENTRY TexSubImage3DRobustANGLE(GLenum target,
                                                        GLsizei bufSize,
                                                        const void *pixels)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
         "GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
         "GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufsize = %d, const GLvoid* pixels = "
@@ -2607,7 +2605,7 @@ ANGLE_EXPORT void GL_APIENTRY TexSubImage3DRobustANGLE(GLenum target,
 ANGLE_EXPORT void GL_APIENTRY
 GetQueryivRobustANGLE(GLenum target, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -2632,7 +2630,7 @@ ANGLE_EXPORT void GL_APIENTRY GetQueryObjectuivRobustANGLE(GLuint id,
                                                            GLsizei *length,
                                                            GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint id = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint* params = 0x%0.8p)",
         id, pname, bufSize, length, params);
@@ -2657,7 +2655,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBufferPointervRobustANGLE(GLenum target,
                                                            GLsizei *length,
                                                            void **params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X,  GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLvoid** params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -2680,7 +2678,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBufferPointervRobustANGLE(GLenum target,
 ANGLE_EXPORT void GL_APIENTRY
 GetIntegeri_vRobustANGLE(GLenum target, GLuint index, GLsizei bufSize, GLsizei *length, GLint *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLuint index = %u, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* data = 0x%0.8p)",
         target, index, bufSize, length, data);
@@ -2706,7 +2704,7 @@ ANGLE_EXPORT void GL_APIENTRY GetInternalformativRobustANGLE(GLenum target,
                                                              GLsizei *length,
                                                              GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLenum pname = 0x%X, GLsizei bufSize "
         "= %d, GLsizei* length = 0x%0.8p, GLint* params = 0x%0.8p)",
         target, internalformat, pname, bufSize, length, params);
@@ -2733,7 +2731,7 @@ ANGLE_EXPORT void GL_APIENTRY GetVertexAttribIivRobustANGLE(GLuint index,
                                                             GLsizei *length,
                                                             GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint index = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint* params = 0x%0.8p)",
         index, pname, bufSize, length, params);
@@ -2763,7 +2761,7 @@ ANGLE_EXPORT void GL_APIENTRY GetVertexAttribIuivRobustANGLE(GLuint index,
                                                              GLsizei *length,
                                                              GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint index = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLuint* params = 0x%0.8p)",
         index, pname, bufSize, length, params);
@@ -2793,7 +2791,7 @@ ANGLE_EXPORT void GL_APIENTRY GetUniformuivRobustANGLE(GLuint program,
                                                        GLsizei *length,
                                                        GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLuint* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -2823,7 +2821,7 @@ ANGLE_EXPORT void GL_APIENTRY GetActiveUniformBlockivRobustANGLE(GLuint program,
                                                                  GLsizei *length,
                                                                  GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLuint uniformBlockIndex = %u, GLenum pname = 0x%X, GLsizei bufsize "
         "= %d, GLsizei* length = 0x%0.8p, GLint* params = 0x%0.8p)",
         program, uniformBlockIndex, pname, bufSize, length, params);
@@ -2849,7 +2847,7 @@ ANGLE_EXPORT void GL_APIENTRY GetInteger64vRobustANGLE(GLenum pname,
                                                        GLsizei *length,
                                                        GLint64 *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLint64* params = "
         "0x%0.8p)",
         pname, bufSize, length, data);
@@ -2882,7 +2880,7 @@ ANGLE_EXPORT void GL_APIENTRY GetInteger64i_vRobustANGLE(GLenum target,
                                                          GLsizei *length,
                                                          GLint64 *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLuint index = %u, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint64* data = 0x%0.8p)",
         target, index, bufSize, length, data);
@@ -2907,7 +2905,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBufferParameteri64vRobustANGLE(GLenum target,
                                                                 GLsizei *length,
                                                                 GLint64 *params)
 {
-     EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)", target, pname,
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)", target, pname,
           bufSize, length, params);
 
     Context *context = GetValidGlobalContext();
@@ -2931,7 +2929,7 @@ ANGLE_EXPORT void GL_APIENTRY SamplerParameterivRobustANGLE(GLuint sampler,
                                                             GLsizei bufSize,
                                                             const GLint *param)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLint* params = "
         "0x%0.8p)",
         sampler, pname, bufSize, param);
@@ -2953,7 +2951,7 @@ ANGLE_EXPORT void GL_APIENTRY SamplerParameterfvRobustANGLE(GLuint sampler,
                                                             GLsizei bufSize,
                                                             const GLfloat *param)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLfloat* params = "
         "0x%0.8p)",
         sampler, pname, bufSize, param);
@@ -2976,7 +2974,7 @@ ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterivRobustANGLE(GLuint sampler,
                                                                GLsizei *length,
                                                                GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %u, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         sampler, pname, bufSize, length, params);
@@ -3002,7 +3000,7 @@ ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterfvRobustANGLE(GLuint sampler,
                                                                GLsizei *length,
                                                                GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sample = %ur, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLfloat* params = 0x%0.8p)",
         sampler, pname, bufSize, length, params);
@@ -3028,7 +3026,7 @@ ANGLE_EXPORT void GL_APIENTRY GetFramebufferParameterivRobustANGLE(GLenum target
                                                                    GLsizei *length,
                                                                    GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -3042,7 +3040,7 @@ ANGLE_EXPORT void GL_APIENTRY GetProgramInterfaceivRobustANGLE(GLuint program,
                                                                GLsizei *length,
                                                                GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLenum programInterface = 0x%X, GLenum pname = 0x%X, GLsizei "
         "bufsize = %d, GLsizei* length = 0x%0.8p, GLint* params = 0x%0.8p)",
         program, programInterface, pname, bufSize, length, params);
@@ -3055,7 +3053,7 @@ ANGLE_EXPORT void GL_APIENTRY GetBooleani_vRobustANGLE(GLenum target,
                                                        GLsizei *length,
                                                        GLboolean *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLuint index = %u, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLboolean* data = 0x%0.8p)",
         target, index, bufSize, length, data);
@@ -3079,7 +3077,7 @@ ANGLE_EXPORT void GL_APIENTRY GetMultisamplefvRobustANGLE(GLenum pname,
                                                           GLsizei *length,
                                                           GLfloat *val)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLuint index = %u, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLfloat* val = 0x%0.8p)",
         pname, index, bufSize, length, val);
@@ -3093,7 +3091,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexLevelParameterivRobustANGLE(GLenum target,
                                                                 GLsizei *length,
                                                                 GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, "
         "GLsizei* length = 0x%0.8p, GLint* params = 0x%0.8p)",
         target, level, pname, bufSize, length, params);
@@ -3107,7 +3105,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexLevelParameterfvRobustANGLE(GLenum target,
                                                                 GLsizei *length,
                                                                 GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, "
         "GLsizei* length = 0x%0.8p, GLfloat* params = 0x%0.8p)",
         target, level, pname, bufSize, length, params);
@@ -3119,7 +3117,7 @@ ANGLE_EXPORT void GL_APIENTRY GetPointervRobustANGLERobustANGLE(GLenum pname,
                                                                 GLsizei *length,
                                                                 void **params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, void **params = "
         "0x%0.8p)",
         pname, bufSize, length, params);
@@ -3136,7 +3134,7 @@ ANGLE_EXPORT void GL_APIENTRY ReadnPixelsRobustANGLE(GLint x,
                                                      GLsizei *length,
                                                      void *data)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
         "GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLvoid *data = 0x%0.8p)",
@@ -3164,7 +3162,7 @@ ANGLE_EXPORT void GL_APIENTRY GetnUniformfvRobustANGLE(GLuint program,
                                                        GLsizei *length,
                                                        GLfloat *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %d, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLfloat* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -3177,7 +3175,7 @@ ANGLE_EXPORT void GL_APIENTRY GetnUniformivRobustANGLE(GLuint program,
                                                        GLsizei *length,
                                                        GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %d, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -3190,7 +3188,7 @@ ANGLE_EXPORT void GL_APIENTRY GetnUniformuivRobustANGLE(GLuint program,
                                                         GLsizei *length,
                                                         GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLuint* params = 0x%0.8p)",
         program, location, bufSize, length, params);
@@ -3202,7 +3200,7 @@ ANGLE_EXPORT void GL_APIENTRY TexParameterIivRobustANGLE(GLenum target,
                                                          GLsizei bufSize,
                                                          const GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLint *params = "
         "0x%0.8p)",
         target, pname, bufSize, params);
@@ -3214,7 +3212,7 @@ ANGLE_EXPORT void GL_APIENTRY TexParameterIuivRobustANGLE(GLenum target,
                                                           GLsizei bufSize,
                                                           const GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLuint *params = "
         "0x%0.8p)",
         target, pname, bufSize, params);
@@ -3227,7 +3225,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexParameterIivRobustANGLE(GLenum target,
                                                             GLsizei *length,
                                                             GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint *params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -3240,7 +3238,7 @@ ANGLE_EXPORT void GL_APIENTRY GetTexParameterIuivRobustANGLE(GLenum target,
                                                              GLsizei *length,
                                                              GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLuint *params = 0x%0.8p)",
         target, pname, bufSize, length, params);
@@ -3252,7 +3250,7 @@ ANGLE_EXPORT void GL_APIENTRY SamplerParameterIivRobustANGLE(GLuint sampler,
                                                              GLsizei bufSize,
                                                              const GLint *param)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLint *param = "
         "0x%0.8p)",
         sampler, pname, bufSize, param);
@@ -3264,7 +3262,7 @@ ANGLE_EXPORT void GL_APIENTRY SamplerParameterIuivRobustANGLE(GLuint sampler,
                                                               GLsizei bufSize,
                                                               const GLuint *param)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, const GLuint *param = "
         "0x%0.8p)",
         sampler, pname, bufSize, param);
@@ -3277,7 +3275,7 @@ ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIivRobustANGLE(GLuint sampler,
                                                                 GLsizei *length,
                                                                 GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLint *params = 0x%0.8p)",
         sampler, pname, bufSize, length, params);
@@ -3290,7 +3288,7 @@ ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIuivRobustANGLE(GLuint sampler,
                                                                  GLsizei *length,
                                                                  GLuint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint sampler = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = "
         "0x%0.8p, GLuint *params = 0x%0.8p)",
         sampler, pname, bufSize, length, params);
@@ -3303,7 +3301,7 @@ ANGLE_EXPORT void GL_APIENTRY GetQueryObjectivRobustANGLE(GLuint id,
                                                           GLsizei *length,
                                                           GLint *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint id = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLuint *params = 0x%0.8p)",
         id, pname, bufSize, length, params);
@@ -3328,7 +3326,7 @@ ANGLE_EXPORT void GL_APIENTRY GetQueryObjecti64vRobustANGLE(GLuint id,
                                                             GLsizei *length,
                                                             GLint64 *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint id = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLint64 *params = 0x%0.8p)",
         id, pname, bufSize, length, params);
@@ -3353,7 +3351,7 @@ ANGLE_EXPORT void GL_APIENTRY GetQueryObjectui64vRobustANGLE(GLuint id,
                                                              GLsizei *length,
                                                              GLuint64 *params)
 {
-     EVENT_API_LOCK1(
+    EVENT(
         "(GLuint id = %d, GLenum pname = 0x%X, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, "
         "GLuint64 *params = 0x%0.8p)",
         id, pname, bufSize, length, params);
diff --git a/src/libGLESv2/entry_points_gles_3_0.cpp b/src/libGLESv2/entry_points_gles_3_0.cpp
index a0740e773..6b022a6ab 100644
--- a/src/libGLESv2/entry_points_gles_3_0.cpp
+++ b/src/libGLESv2/entry_points_gles_3_0.cpp
@@ -26,14 +26,12 @@
 
 #include "common/debug.h"
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace gl
 {
 
 void GL_APIENTRY ReadBuffer(GLenum mode)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X)", mode);
+    EVENT("(GLenum mode = 0x%X)", mode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -49,7 +47,7 @@ void GL_APIENTRY ReadBuffer(GLenum mode)
 
 void GL_APIENTRY DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLuint start = %u, GLuint end = %u, GLsizei count = %d, GLenum type = 0x%X, "
+    EVENT("(GLenum mode = 0x%X, GLuint start = %u, GLuint end = %u, GLsizei count = %d, GLenum type = 0x%X, "
           "const GLvoid* indices = 0x%0.8p)", mode, start, end, count, type, indices);
 
     Context *context = GetValidGlobalContext();
@@ -79,7 +77,7 @@ void GL_APIENTRY DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsize
 
 void GL_APIENTRY TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
           "GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLenum format = 0x%X, "
           "GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)",
           target, level, internalformat, width, height, depth, border, format, type, pixels);
@@ -101,7 +99,7 @@ void GL_APIENTRY TexImage3D(GLenum target, GLint level, GLint internalformat, GL
 
 void GL_APIENTRY TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
           "GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
           "GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)",
           target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
@@ -123,7 +121,7 @@ void GL_APIENTRY TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint
 
 void GL_APIENTRY CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
           "GLint zoffset = %d, GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)",
           target, level, xoffset, yoffset, zoffset, x, y, width, height);
 
@@ -143,7 +141,7 @@ void GL_APIENTRY CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GL
 
 void GL_APIENTRY CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
           "GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLsizei imageSize = %d, "
           "const GLvoid* data = 0x%0.8p)",
           target, level, internalformat, width, height, depth, border, imageSize, data);
@@ -165,7 +163,7 @@ void GL_APIENTRY CompressedTexImage3D(GLenum target, GLint level, GLenum interna
 
 void GL_APIENTRY CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
         "GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
         "GLenum format = 0x%X, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)",
         target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
@@ -187,7 +185,7 @@ void GL_APIENTRY CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffs
 
 void GL_APIENTRY GenQueries(GLsizei n, GLuint* ids)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -206,7 +204,7 @@ void GL_APIENTRY GenQueries(GLsizei n, GLuint* ids)
 
 void GL_APIENTRY DeleteQueries(GLsizei n, const GLuint* ids)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -225,7 +223,7 @@ void GL_APIENTRY DeleteQueries(GLsizei n, const GLuint* ids)
 
 GLboolean GL_APIENTRY IsQuery(GLuint id)
 {
-    EVENT_API_LOCK1("(GLuint id = %u)", id);
+    EVENT("(GLuint id = %u)", id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -244,7 +242,7 @@ GLboolean GL_APIENTRY IsQuery(GLuint id)
 
 void GL_APIENTRY BeginQuery(GLenum target, GLuint id)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint id = %u)", target, id);
+    EVENT("(GLenum target = 0x%X, GLuint id = %u)", target, id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -265,7 +263,7 @@ void GL_APIENTRY BeginQuery(GLenum target, GLuint id)
 
 void GL_APIENTRY EndQuery(GLenum target)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X)", target);
+    EVENT("(GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -286,7 +284,7 @@ void GL_APIENTRY EndQuery(GLenum target)
 
 void GL_APIENTRY GetQueryiv(GLenum target, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -302,7 +300,7 @@ void GL_APIENTRY GetQueryiv(GLenum target, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params)
 {
-    EVENT_API_LOCK1("(GLuint id = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", id, pname, params);
+    EVENT("(GLuint id = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", id, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -318,7 +316,7 @@ void GL_APIENTRY GetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params)
 
 GLboolean GL_APIENTRY UnmapBuffer(GLenum target)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X)", target);
+    EVENT("(GLenum target = 0x%X)", target);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -336,7 +334,7 @@ GLboolean GL_APIENTRY UnmapBuffer(GLenum target)
 
 void GL_APIENTRY GetBufferPointerv(GLenum target, GLenum pname, GLvoid** params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)", target, pname, params);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)", target, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -367,7 +365,7 @@ void GL_APIENTRY DrawBuffers(GLsizei n, const GLenum* bufs)
 
 void GL_APIENTRY UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -385,7 +383,7 @@ void GL_APIENTRY UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -403,7 +401,7 @@ void GL_APIENTRY UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -421,7 +419,7 @@ void GL_APIENTRY UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -439,7 +437,7 @@ void GL_APIENTRY UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -457,7 +455,7 @@ void GL_APIENTRY UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)",
           location, count, transpose, value);
 
     Context *context = GetValidGlobalContext();
@@ -475,7 +473,7 @@ void GL_APIENTRY UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean tra
 
 void GL_APIENTRY BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
 {
-    EVENT_API_LOCK1("(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, GLint dstX0 = %d, "
+    EVENT("(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, GLint dstX0 = %d, "
           "GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, GLbitfield mask = 0x%X, GLenum filter = 0x%X)",
           srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
 
@@ -496,7 +494,7 @@ void GL_APIENTRY BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint sr
 
 void GL_APIENTRY RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
+    EVENT("(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
         target, samples, internalformat, width, height);
 
     Context *context = GetValidGlobalContext();
@@ -520,7 +518,7 @@ void GL_APIENTRY RenderbufferStorageMultisample(GLenum target, GLsizei samples,
 
 void GL_APIENTRY FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLuint texture = %u, GLint level = %d, GLint layer = %d)",
+    EVENT("(GLenum target = 0x%X, GLenum attachment = 0x%X, GLuint texture = %u, GLint level = %d, GLint layer = %d)",
         target, attachment, texture, level, layer);
 
     Context *context = GetValidGlobalContext();
@@ -538,7 +536,7 @@ void GL_APIENTRY FramebufferTextureLayer(GLenum target, GLenum attachment, GLuin
 
 GLvoid *GL_APIENTRY MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)",
+    EVENT("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)",
           target, offset, length, access);
 
     Context *context = GetValidGlobalContext();
@@ -558,7 +556,7 @@ GLvoid *GL_APIENTRY MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr le
 
 void GL_APIENTRY FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)", target, offset, length);
+    EVENT("(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)", target, offset, length);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -575,7 +573,7 @@ void GL_APIENTRY FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeip
 
 void GL_APIENTRY BindVertexArray(GLuint array)
 {
-    EVENT_API_LOCK1("(GLuint array = %u)", array);
+    EVENT("(GLuint array = %u)", array);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -591,7 +589,7 @@ void GL_APIENTRY BindVertexArray(GLuint array)
 
 void GL_APIENTRY DeleteVertexArrays(GLsizei n, const GLuint* arrays)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)", n, arrays);
+    EVENT("(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)", n, arrays);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -613,7 +611,7 @@ void GL_APIENTRY DeleteVertexArrays(GLsizei n, const GLuint* arrays)
 
 void GL_APIENTRY GenVertexArrays(GLsizei n, GLuint* arrays)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* arrays = 0x%0.8p)", n, arrays);
+    EVENT("(GLsizei n = %d, GLuint* arrays = 0x%0.8p)", n, arrays);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -632,7 +630,7 @@ void GL_APIENTRY GenVertexArrays(GLsizei n, GLuint* arrays)
 
 GLboolean GL_APIENTRY IsVertexArray(GLuint array)
 {
-    EVENT_API_LOCK1("(GLuint array = %u)", array);
+    EVENT("(GLuint array = %u)", array);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -657,7 +655,7 @@ GLboolean GL_APIENTRY IsVertexArray(GLuint array)
 
 void GL_APIENTRY GetIntegeri_v(GLenum target, GLuint index, GLint *data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint index = %u, GLint* data = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLuint index = %u, GLint* data = 0x%0.8p)",
           target, index, data);
 
     Context *context = GetValidGlobalContext();
@@ -673,7 +671,7 @@ void GL_APIENTRY GetIntegeri_v(GLenum target, GLuint index, GLint *data)
 
 void GL_APIENTRY BeginTransformFeedback(GLenum primitiveMode)
 {
-    EVENT_API_LOCK1("(GLenum primitiveMode = 0x%X)", primitiveMode);
+    EVENT("(GLenum primitiveMode = 0x%X)", primitiveMode);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -689,7 +687,7 @@ void GL_APIENTRY BeginTransformFeedback(GLenum primitiveMode)
 
 void GL_APIENTRY EndTransformFeedback(void)
 {
-    EVENT_API_LOCK1("(void)");
+    EVENT("(void)");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -715,7 +713,7 @@ void GL_APIENTRY EndTransformFeedback(void)
 
 void GL_APIENTRY BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u, GLintptr offset = %d, GLsizeiptr size = %d)",
+    EVENT("(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u, GLintptr offset = %d, GLsizeiptr size = %d)",
           target, index, buffer, offset, size);
 
     Context *context = GetValidGlobalContext();
@@ -810,7 +808,7 @@ void GL_APIENTRY BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLi
 
 void GL_APIENTRY BindBufferBase(GLenum target, GLuint index, GLuint buffer)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u)",
+    EVENT("(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u)",
           target, index, buffer);
 
     Context *context = GetValidGlobalContext();
@@ -919,7 +917,7 @@ void GL_APIENTRY BindBufferBase(GLenum target, GLuint index, GLuint buffer)
 
 void GL_APIENTRY TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLsizei count = %d, const GLchar* const* varyings = 0x%0.8p, GLenum bufferMode = 0x%X)",
+    EVENT("(GLuint program = %u, GLsizei count = %d, const GLchar* const* varyings = 0x%0.8p, GLenum bufferMode = 0x%X)",
           program, count, varyings, bufferMode);
 
     Context *context = GetValidGlobalContext();
@@ -966,7 +964,7 @@ void GL_APIENTRY TransformFeedbackVaryings(GLuint program, GLsizei count, const
 
 void GL_APIENTRY GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLuint index = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, "
+    EVENT("(GLuint program = %u, GLuint index = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, "
           "GLsizei* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)",
           program, index, bufSize, length, size, type, name);
 
@@ -1003,7 +1001,7 @@ void GL_APIENTRY GetTransformFeedbackVarying(GLuint program, GLuint index, GLsiz
 
 void GL_APIENTRY VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLint size = %d, GLenum type = 0x%X, GLsizei stride = %d, const GLvoid* pointer = 0x%0.8p)",
+    EVENT("(GLuint index = %u, GLint size = %d, GLenum type = 0x%X, GLsizei stride = %d, const GLvoid* pointer = 0x%0.8p)",
           index, size, type, stride, pointer);
 
     Context *context = GetValidGlobalContext();
@@ -1065,7 +1063,7 @@ void GL_APIENTRY VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLs
 
 void GL_APIENTRY GetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
+    EVENT("(GLuint index = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
           index, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1087,7 +1085,7 @@ void GL_APIENTRY GetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)
 
 void GL_APIENTRY GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLenum pname = 0x%X, GLuint* params = 0x%0.8p)",
+    EVENT("(GLuint index = %u, GLenum pname = 0x%X, GLuint* params = 0x%0.8p)",
           index, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1109,7 +1107,7 @@ void GL_APIENTRY GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)
 
 void GL_APIENTRY VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLint x = %d, GLint y = %d, GLint z = %d, GLint w = %d)",
+    EVENT("(GLuint index = %u, GLint x = %d, GLint y = %d, GLint z = %d, GLint w = %d)",
           index, x, y, z, w);
 
     Context *context = GetValidGlobalContext();
@@ -1133,7 +1131,7 @@ void GL_APIENTRY VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint
 
 void GL_APIENTRY VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLuint x = %u, GLuint y = %u, GLuint z = %u, GLuint w = %u)",
+    EVENT("(GLuint index = %u, GLuint x = %u, GLuint y = %u, GLuint z = %u, GLuint w = %u)",
           index, x, y, z, w);
 
     Context *context = GetValidGlobalContext();
@@ -1157,7 +1155,7 @@ void GL_APIENTRY VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GL
 
 void GL_APIENTRY VertexAttribI4iv(GLuint index, const GLint* v)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, const GLint* v = 0x%0.8p)", index, v);
+    EVENT("(GLuint index = %u, const GLint* v = 0x%0.8p)", index, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1180,7 +1178,7 @@ void GL_APIENTRY VertexAttribI4iv(GLuint index, const GLint* v)
 
 void GL_APIENTRY VertexAttribI4uiv(GLuint index, const GLuint* v)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, const GLuint* v = 0x%0.8p)", index, v);
+    EVENT("(GLuint index = %u, const GLuint* v = 0x%0.8p)", index, v);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1203,7 +1201,7 @@ void GL_APIENTRY VertexAttribI4uiv(GLuint index, const GLuint* v)
 
 void GL_APIENTRY GetUniformuiv(GLuint program, GLint location, GLuint* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLint location = %d, GLuint* params = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLint location = %d, GLuint* params = 0x%0.8p)",
           program, location, params);
 
     Context *context = GetValidGlobalContext();
@@ -1223,7 +1221,7 @@ void GL_APIENTRY GetUniformuiv(GLuint program, GLint location, GLuint* params)
 
 GLint GL_APIENTRY GetFragDataLocation(GLuint program, const GLchar *name)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, const GLchar *name = 0x%0.8p)",
+    EVENT("(GLuint program = %u, const GLchar *name = 0x%0.8p)",
           program, name);
 
     Context *context = GetValidGlobalContext();
@@ -1280,7 +1278,7 @@ void GL_APIENTRY Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLu
 
 void GL_APIENTRY Uniform1uiv(GLint location, GLsizei count, const GLuint* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
           location, count, value);
 
     Context *context = GetValidGlobalContext();
@@ -1298,7 +1296,7 @@ void GL_APIENTRY Uniform1uiv(GLint location, GLsizei count, const GLuint* value)
 
 void GL_APIENTRY Uniform2uiv(GLint location, GLsizei count, const GLuint* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
           location, count, value);
 
     Context *context = GetValidGlobalContext();
@@ -1316,7 +1314,7 @@ void GL_APIENTRY Uniform2uiv(GLint location, GLsizei count, const GLuint* value)
 
 void GL_APIENTRY Uniform3uiv(GLint location, GLsizei count, const GLuint* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLuint* value)",
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLuint* value)",
           location, count, value);
 
     Context *context = GetValidGlobalContext();
@@ -1334,7 +1332,7 @@ void GL_APIENTRY Uniform3uiv(GLint location, GLsizei count, const GLuint* value)
 
 void GL_APIENTRY Uniform4uiv(GLint location, GLsizei count, const GLuint* value)
 {
-    EVENT_API_LOCK1("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
+    EVENT("(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)",
           location, count, value);
 
     Context *context = GetValidGlobalContext();
@@ -1352,7 +1350,7 @@ void GL_APIENTRY Uniform4uiv(GLint location, GLsizei count, const GLuint* value)
 
 void GL_APIENTRY ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint* value)
 {
-    EVENT_API_LOCK1("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLint* value = 0x%0.8p)",
+    EVENT("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLint* value = 0x%0.8p)",
           buffer, drawbuffer, value);
 
     Context *context = GetValidGlobalContext();
@@ -1370,7 +1368,7 @@ void GL_APIENTRY ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint* val
 
 void GL_APIENTRY ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint* value)
 {
-    EVENT_API_LOCK1("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLuint* value = 0x%0.8p)",
+    EVENT("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLuint* value = 0x%0.8p)",
           buffer, drawbuffer, value);
 
     Context *context = GetValidGlobalContext();
@@ -1388,7 +1386,7 @@ void GL_APIENTRY ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint* v
 
 void GL_APIENTRY ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat* value)
 {
-    EVENT_API_LOCK1("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLfloat* value = 0x%0.8p)",
+    EVENT("(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLfloat* value = 0x%0.8p)",
           buffer, drawbuffer, value);
 
     Context *context = GetValidGlobalContext();
@@ -1406,7 +1404,7 @@ void GL_APIENTRY ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat* v
 
 void GL_APIENTRY ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
 {
-    EVENT_API_LOCK1("(GLenum buffer = 0x%X, GLint drawbuffer = %d, GLfloat depth, GLint stencil = %d)",
+    EVENT("(GLenum buffer = 0x%X, GLint drawbuffer = %d, GLfloat depth, GLint stencil = %d)",
           buffer, drawbuffer, depth, stencil);
 
     Context *context = GetValidGlobalContext();
@@ -1424,7 +1422,7 @@ void GL_APIENTRY ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, G
 
 const GLubyte *GL_APIENTRY GetStringi(GLenum name, GLuint index)
 {
-    EVENT_API_LOCK1("(GLenum name = 0x%X, GLuint index = %u)", name, index);
+    EVENT("(GLenum name = 0x%X, GLuint index = %u)", name, index);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1442,7 +1440,7 @@ const GLubyte *GL_APIENTRY GetStringi(GLenum name, GLuint index)
 
 void GL_APIENTRY CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
 {
-    EVENT_API_LOCK1("(GLenum readTarget = 0x%X, GLenum writeTarget = 0x%X, GLintptr readOffset = %d, GLintptr writeOffset = %d, GLsizeiptr size = %d)",
+    EVENT("(GLenum readTarget = 0x%X, GLenum writeTarget = 0x%X, GLintptr readOffset = %d, GLintptr writeOffset = %d, GLsizeiptr size = %d)",
           readTarget, writeTarget, readOffset, writeOffset, size);
 
     Context *context = GetValidGlobalContext();
@@ -1461,7 +1459,7 @@ void GL_APIENTRY CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintp
 
 void GL_APIENTRY GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLsizei uniformCount = %d, const GLchar* const* uniformNames = 0x%0.8p, GLuint* uniformIndices = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLsizei uniformCount = %d, const GLchar* const* uniformNames = 0x%0.8p, GLuint* uniformIndices = 0x%0.8p)",
           program, uniformCount, uniformNames, uniformIndices);
 
     Context *context = GetValidGlobalContext();
@@ -1505,7 +1503,7 @@ void GL_APIENTRY GetUniformIndices(GLuint program, GLsizei uniformCount, const G
 
 void GL_APIENTRY GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLsizei uniformCount = %d, const GLuint* uniformIndices = 0x%0.8p, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLsizei uniformCount = %d, const GLuint* uniformIndices = 0x%0.8p, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
           program, uniformCount, uniformIndices, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1574,7 +1572,7 @@ void GL_APIENTRY GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const
 
 GLuint GL_APIENTRY GetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, const GLchar* uniformBlockName = 0x%0.8p)", program, uniformBlockName);
+    EVENT("(GLuint program = %u, const GLchar* uniformBlockName = 0x%0.8p)", program, uniformBlockName);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1599,7 +1597,7 @@ GLuint GL_APIENTRY GetUniformBlockIndex(GLuint program, const GLchar* uniformBlo
 
 void GL_APIENTRY GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
           program, uniformBlockIndex, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1618,7 +1616,7 @@ void GL_APIENTRY GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockInde
 
 void GL_APIENTRY GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLchar* uniformBlockName = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLchar* uniformBlockName = 0x%0.8p)",
           program, uniformBlockIndex, bufSize, length, uniformBlockName);
 
     Context *context = GetValidGlobalContext();
@@ -1649,7 +1647,7 @@ void GL_APIENTRY GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIn
 
 void GL_APIENTRY UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLuint uniformBlockBinding = %u)",
+    EVENT("(GLuint program = %u, GLuint uniformBlockIndex = %u, GLuint uniformBlockBinding = %u)",
           program, uniformBlockIndex, uniformBlockBinding);
 
     Context *context = GetValidGlobalContext();
@@ -1687,7 +1685,7 @@ void GL_APIENTRY UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, G
 
 void GL_APIENTRY DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei instanceCount = %d)",
+    EVENT("(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei instanceCount = %d)",
           mode, first, count, instanceCount);
 
     Context *context = GetValidGlobalContext();
@@ -1715,7 +1713,7 @@ void GL_APIENTRY DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GL
 
 void GL_APIENTRY DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLsizei instanceCount)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p, GLsizei instanceCount = %d)",
+    EVENT("(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p, GLsizei instanceCount = %d)",
           mode, count, type, indices, instanceCount);
 
     Context *context = GetValidGlobalContext();
@@ -1745,7 +1743,7 @@ void GL_APIENTRY DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type,
 
 GLsync GL_APIENTRY FenceSync_(GLenum condition, GLbitfield flags)
 {
-    EVENT_API_LOCK1("(GLenum condition = 0x%X, GLbitfield flags = 0x%X)", condition, flags);
+    EVENT("(GLenum condition = 0x%X, GLbitfield flags = 0x%X)", condition, flags);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1787,7 +1785,7 @@ GLsync GL_APIENTRY FenceSync_(GLenum condition, GLbitfield flags)
 
 GLboolean GL_APIENTRY IsSync(GLsync sync)
 {
-    EVENT_API_LOCK1("(GLsync sync = 0x%0.8p)", sync);
+    EVENT("(GLsync sync = 0x%0.8p)", sync);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1806,7 +1804,7 @@ GLboolean GL_APIENTRY IsSync(GLsync sync)
 
 void GL_APIENTRY DeleteSync(GLsync sync)
 {
-    EVENT_API_LOCK1("(GLsync sync = 0x%0.8p)", sync);
+    EVENT("(GLsync sync = 0x%0.8p)", sync);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -1829,7 +1827,7 @@ void GL_APIENTRY DeleteSync(GLsync sync)
 
 GLenum GL_APIENTRY ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
 {
-    EVENT_API_LOCK1("(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)",
+    EVENT("(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)",
           sync, flags, timeout);
 
     Context *context = GetValidGlobalContext();
@@ -1871,7 +1869,7 @@ GLenum GL_APIENTRY ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeou
 
 void GL_APIENTRY WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
 {
-    EVENT_API_LOCK1("(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)",
+    EVENT("(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)",
           sync, flags, timeout);
 
     Context *context = GetValidGlobalContext();
@@ -1913,7 +1911,7 @@ void GL_APIENTRY WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
 
 void GL_APIENTRY GetInteger64v(GLenum pname, GLint64* params)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLint64* params = 0x%0.8p)",
+    EVENT("(GLenum pname = 0x%X, GLint64* params = 0x%0.8p)",
           pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -1945,7 +1943,7 @@ void GL_APIENTRY GetInteger64v(GLenum pname, GLint64* params)
 
 void GL_APIENTRY GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
 {
-    EVENT_API_LOCK1("(GLsync sync = 0x%0.8p, GLenum pname = 0x%X, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLint* values = 0x%0.8p)",
+    EVENT("(GLsync sync = 0x%0.8p, GLenum pname = 0x%X, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLint* values = 0x%0.8p)",
           sync, pname, bufSize, length, values);
 
     Context *context = GetValidGlobalContext();
@@ -1997,7 +1995,7 @@ void GL_APIENTRY GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei*
 
 void GL_APIENTRY GetInteger64i_v(GLenum target, GLuint index, GLint64* data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint index = %u, GLint64* data = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLuint index = %u, GLint64* data = 0x%0.8p)",
           target, index, data);
 
     Context *context = GetValidGlobalContext();
@@ -2013,7 +2011,7 @@ void GL_APIENTRY GetInteger64i_v(GLenum target, GLuint index, GLint64* data)
 
 void GL_APIENTRY GetBufferParameteri64v(GLenum target, GLenum pname, GLint64* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)",
           target, pname, params);
 
     Context *context = GetValidGlobalContext();
@@ -2032,7 +2030,7 @@ void GL_APIENTRY GetBufferParameteri64v(GLenum target, GLenum pname, GLint64* pa
 
 void GL_APIENTRY GenSamplers(GLsizei count, GLuint* samplers)
 {
-    EVENT_API_LOCK1("(GLsizei count = %d, GLuint* samplers = 0x%0.8p)", count, samplers);
+    EVENT("(GLsizei count = %d, GLuint* samplers = 0x%0.8p)", count, samplers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2051,7 +2049,7 @@ void GL_APIENTRY GenSamplers(GLsizei count, GLuint* samplers)
 
 void GL_APIENTRY DeleteSamplers(GLsizei count, const GLuint* samplers)
 {
-    EVENT_API_LOCK1("(GLsizei count = %d, const GLuint* samplers = 0x%0.8p)", count, samplers);
+    EVENT("(GLsizei count = %d, const GLuint* samplers = 0x%0.8p)", count, samplers);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2070,7 +2068,7 @@ void GL_APIENTRY DeleteSamplers(GLsizei count, const GLuint* samplers)
 
 GLboolean GL_APIENTRY IsSampler(GLuint sampler)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u)", sampler);
+    EVENT("(GLuint sampler = %u)", sampler);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2089,7 +2087,7 @@ GLboolean GL_APIENTRY IsSampler(GLuint sampler)
 
 void GL_APIENTRY BindSampler(GLuint unit, GLuint sampler)
 {
-    EVENT_API_LOCK1("(GLuint unit = %u, GLuint sampler = %u)", unit, sampler);
+    EVENT("(GLuint unit = %u, GLuint sampler = %u)", unit, sampler);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2118,7 +2116,7 @@ void GL_APIENTRY BindSampler(GLuint unit, GLuint sampler)
 
 void GL_APIENTRY SamplerParameteri(GLuint sampler, GLenum pname, GLint param)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u, GLenum pname = 0x%X, GLint param = %d)", sampler, pname, param);
+    EVENT("(GLuint sampler = %u, GLenum pname = 0x%X, GLint param = %d)", sampler, pname, param);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2135,7 +2133,7 @@ void GL_APIENTRY SamplerParameteri(GLuint sampler, GLenum pname, GLint param)
 
 void GL_APIENTRY SamplerParameteriv(GLuint sampler, GLenum pname, const GLint* param)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u, GLenum pname = 0x%X, const GLint* params = 0x%0.8p)", sampler,
+    EVENT("(GLuint sampler = %u, GLenum pname = 0x%X, const GLint* params = 0x%0.8p)", sampler,
           pname, param);
 
     Context *context = GetValidGlobalContext();
@@ -2153,7 +2151,7 @@ void GL_APIENTRY SamplerParameteriv(GLuint sampler, GLenum pname, const GLint* p
 
 void GL_APIENTRY SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u, GLenum pname = 0x%X, GLfloat param = %g)", sampler, pname, param);
+    EVENT("(GLuint sampler = %u, GLenum pname = 0x%X, GLfloat param = %g)", sampler, pname, param);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2170,7 +2168,7 @@ void GL_APIENTRY SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
 
 void GL_APIENTRY SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* param)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u, GLenum pname = 0x%X, const GLfloat* params = 0x%0.8p)", sampler,
+    EVENT("(GLuint sampler = %u, GLenum pname = 0x%X, const GLfloat* params = 0x%0.8p)", sampler,
           pname, param);
 
     Context *context = GetValidGlobalContext();
@@ -2188,7 +2186,7 @@ void GL_APIENTRY SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat*
 
 void GL_APIENTRY GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
 {
-    EVENT_API_LOCK1("(GLuint sampler = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", sampler, pname,
+    EVENT("(GLuint sampler = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", sampler, pname,
           params);
 
     Context *context = GetValidGlobalContext();
@@ -2206,7 +2204,7 @@ void GL_APIENTRY GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *para
 
 void GL_APIENTRY GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params)
 {
-    EVENT_API_LOCK1("(GLuint sample = %ur, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", sampler, pname, params);
+    EVENT("(GLuint sample = %ur, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)", sampler, pname, params);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2223,7 +2221,7 @@ void GL_APIENTRY GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* pa
 
 void GL_APIENTRY VertexAttribDivisor(GLuint index, GLuint divisor)
 {
-    EVENT_API_LOCK1("(GLuint index = %u, GLuint divisor = %u)", index, divisor);
+    EVENT("(GLuint index = %u, GLuint divisor = %u)", index, divisor);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2246,7 +2244,7 @@ void GL_APIENTRY VertexAttribDivisor(GLuint index, GLuint divisor)
 
 void GL_APIENTRY BindTransformFeedback(GLenum target, GLuint id)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint id = %u)", target, id);
+    EVENT("(GLenum target = 0x%X, GLuint id = %u)", target, id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2292,7 +2290,7 @@ void GL_APIENTRY BindTransformFeedback(GLenum target, GLuint id)
 
 void GL_APIENTRY DeleteTransformFeedbacks(GLsizei n, const GLuint* ids)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, const GLuint* ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2311,7 +2309,7 @@ void GL_APIENTRY DeleteTransformFeedbacks(GLsizei n, const GLuint* ids)
 
 void GL_APIENTRY GenTransformFeedbacks(GLsizei n, GLuint* ids)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
+    EVENT("(GLsizei n = %d, GLuint* ids = 0x%0.8p)", n, ids);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2330,7 +2328,7 @@ void GL_APIENTRY GenTransformFeedbacks(GLsizei n, GLuint* ids)
 
 GLboolean GL_APIENTRY IsTransformFeedback(GLuint id)
 {
-    EVENT_API_LOCK1("(GLuint id = %u)", id);
+    EVENT("(GLuint id = %u)", id);
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2357,7 +2355,7 @@ GLboolean GL_APIENTRY IsTransformFeedback(GLuint id)
 
 void GL_APIENTRY PauseTransformFeedback(void)
 {
-    EVENT_API_LOCK1("(void)");
+    EVENT("(void)");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2384,7 +2382,7 @@ void GL_APIENTRY PauseTransformFeedback(void)
 
 void GL_APIENTRY ResumeTransformFeedback(void)
 {
-    EVENT_API_LOCK1("(void)");
+    EVENT("(void)");
 
     Context *context = GetValidGlobalContext();
     if (context)
@@ -2411,7 +2409,7 @@ void GL_APIENTRY ResumeTransformFeedback(void)
 
 void GL_APIENTRY GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, GLvoid* binary)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLenum* binaryFormat = 0x%0.8p, GLvoid* binary = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLenum* binaryFormat = 0x%0.8p, GLvoid* binary = 0x%0.8p)",
           program, bufSize, length, binaryFormat, binary);
 
     Context *context = GetValidGlobalContext();
@@ -2436,7 +2434,7 @@ void GL_APIENTRY GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* leng
 
 void GL_APIENTRY ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid* binary, GLsizei length)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLenum binaryFormat = 0x%X, const GLvoid* binary = 0x%0.8p, GLsizei length = %d)",
+    EVENT("(GLuint program = %u, GLenum binaryFormat = 0x%X, const GLvoid* binary = 0x%0.8p, GLsizei length = %d)",
           program, binaryFormat, binary, length);
 
     Context *context = GetValidGlobalContext();
@@ -2461,7 +2459,7 @@ void GL_APIENTRY ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid
 
 void GL_APIENTRY ProgramParameteri(GLuint program, GLenum pname, GLint value)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLenum pname = 0x%X, GLint value = %d)",
+    EVENT("(GLuint program = %u, GLenum pname = 0x%X, GLint value = %d)",
           program, pname, value);
 
     Context *context = GetValidGlobalContext();
@@ -2479,7 +2477,7 @@ void GL_APIENTRY ProgramParameteri(GLuint program, GLenum pname, GLint value)
 
 void GL_APIENTRY InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p)",
           target, numAttachments, attachments);
 
     Context *context = GetValidGlobalContext();
@@ -2497,7 +2495,7 @@ void GL_APIENTRY InvalidateFramebuffer(GLenum target, GLsizei numAttachments, co
 
 void GL_APIENTRY InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p, GLint x = %d, "
+    EVENT("(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p, GLint x = %d, "
           "GLint y = %d, GLsizei width = %d, GLsizei height = %d)",
           target, numAttachments, attachments, x, y, width, height);
 
@@ -2516,7 +2514,7 @@ void GL_APIENTRY InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments,
 
 void GL_APIENTRY TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
+    EVENT("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)",
           target, levels, internalformat, width, height);
 
     Context *context = GetValidGlobalContext();
@@ -2547,7 +2545,7 @@ void GL_APIENTRY TexStorage2D(GLenum target, GLsizei levels, GLenum internalform
 
 void GL_APIENTRY TexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
+    EVENT("(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
           "GLsizei height = %d, GLsizei depth = %d)",
           target, levels, internalformat, width, height, depth);
 
@@ -2579,7 +2577,7 @@ void GL_APIENTRY TexStorage3D(GLenum target, GLsizei levels, GLenum internalform
 
 void GL_APIENTRY GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLenum pname = 0x%X, GLsizei bufSize = %d, "
+    EVENT("(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLenum pname = 0x%X, GLsizei bufSize = %d, "
           "GLint* params = 0x%0.8p)",
           target, internalformat, pname, bufSize, params);
 
diff --git a/src/libGLESv2/entry_points_gles_3_1.cpp b/src/libGLESv2/entry_points_gles_3_1.cpp
index f9f937778..b7d10f4e3 100644
--- a/src/libGLESv2/entry_points_gles_3_1.cpp
+++ b/src/libGLESv2/entry_points_gles_3_1.cpp
@@ -17,17 +17,14 @@
 
 #include "common/debug.h"
 
-#include "libGLESv2/entry_points_emulator.h"
-
 namespace gl
 {
 
 void GL_APIENTRY DispatchCompute(GLuint numGroupsX, GLuint numGroupsY, GLuint numGroupsZ)
 {
-    EVENT_API_LOCK1("(GLuint numGroupsX = %u, GLuint numGroupsY = %u, numGroupsZ = %u", numGroupsX,
+    EVENT("(GLuint numGroupsX = %u, GLuint numGroupsY = %u, numGroupsZ = %u", numGroupsX,
           numGroupsY, numGroupsZ);
-	
-	Context *context = GetValidGlobalContext();
+    Context *context = GetValidGlobalContext();
     if (context)
     {
         if (!context->skipValidation())
@@ -40,7 +37,7 @@ void GL_APIENTRY DispatchCompute(GLuint numGroupsX, GLuint numGroupsY, GLuint nu
 
 void GL_APIENTRY DispatchComputeIndirect(GLintptr indirect)
 {
-    EVENT_API_LOCK1("(GLintptr indirect = %d)", indirect);
+    EVENT("(GLintptr indirect = %d)", indirect);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -54,7 +51,7 @@ void GL_APIENTRY DispatchComputeIndirect(GLintptr indirect)
 
 void GL_APIENTRY DrawArraysIndirect(GLenum mode, const void *indirect)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, const void* indirect)", mode, indirect);
+    EVENT("(GLenum mode = 0x%X, const void* indirect)", mode, indirect);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -68,7 +65,7 @@ void GL_APIENTRY DrawArraysIndirect(GLenum mode, const void *indirect)
 
 void GL_APIENTRY DrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)
 {
-    EVENT_API_LOCK1("(GLenum mode = 0x%X, GLenum type = 0x%X, const void* indirect)", mode, type, indirect);
+    EVENT("(GLenum mode = 0x%X, GLenum type = 0x%X, const void* indirect)", mode, type, indirect);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -82,7 +79,7 @@ void GL_APIENTRY DrawElementsIndirect(GLenum mode, GLenum type, const void *indi
 
 void GL_APIENTRY FramebufferParameteri(GLenum target, GLenum pname, GLint param)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)", target, pname, param);
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)", target, pname, param);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -96,7 +93,7 @@ void GL_APIENTRY FramebufferParameteri(GLenum target, GLenum pname, GLint param)
 
 void GL_APIENTRY GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname,
+    EVENT("(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", target, pname,
           params);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -114,7 +111,7 @@ void GL_APIENTRY GetProgramInterfaceiv(GLuint program,
                                        GLenum pname,
                                        GLint *params)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLenum programInterface = 0x%X, GLenum pname = 0x%X, GLint* params "
         "= 0x%0.8p)",
         program, programInterface, pname, params);
@@ -133,7 +130,7 @@ GLuint GL_APIENTRY GetProgramResourceIndex(GLuint program,
                                            GLenum programInterface,
                                            const GLchar *name)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLenum programInterface = 0x%X, const GLchar* name = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLenum programInterface = 0x%X, const GLchar* name = 0x%0.8p)",
           program, programInterface, name);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -154,7 +151,7 @@ void GL_APIENTRY GetProgramResourceName(GLuint program,
                                         GLsizei *length,
                                         GLchar *name)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLenum programInterface = 0x%X, GLuint index = %u, GLsizei bufSize "
         "= %d, GLsizei* length = 0x%0.8p, GLchar* name = 0x%0.8p)",
         program, programInterface, index, bufSize, length, name);
@@ -178,7 +175,7 @@ void GL_APIENTRY GetProgramResourceiv(GLuint program,
                                       GLsizei *length,
                                       GLint *params)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLenum programInterface = 0x%X, GLuint index = %u, GLsizei "
         "propCount = %d, const GLenum* props = 0x%0.8p, GLsizei bufSize = %d, GLsizei* length = "
         "0x%0.8p, GLint* params = 0x%0.8p)",
@@ -198,7 +195,7 @@ GLint GL_APIENTRY GetProgramResourceLocation(GLuint program,
                                              GLenum programInterface,
                                              const GLchar *name)
 {
-    EVENT_API_LOCK1("(GLuint program = %u, GLenum programInterface = 0x%X, const GLchar* name = 0x%0.8p)",
+    EVENT("(GLuint program = %u, GLenum programInterface = 0x%X, const GLchar* name = 0x%0.8p)",
           program, programInterface, name);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -214,7 +211,7 @@ GLint GL_APIENTRY GetProgramResourceLocation(GLuint program,
 
 void GL_APIENTRY UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u, GLbitfield stages = 0x%X, GLuint program = %u)", pipeline, stages,
+    EVENT("(GLuint pipeline = %u, GLbitfield stages = 0x%X, GLuint program = %u)", pipeline, stages,
           program);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -229,7 +226,7 @@ void GL_APIENTRY UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint pro
 
 void GL_APIENTRY ActiveShaderProgram(GLuint pipeline, GLuint program)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u, GLuint program = %u)", pipeline, program);
+    EVENT("(GLuint pipeline = %u, GLuint program = %u)", pipeline, program);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -243,7 +240,7 @@ void GL_APIENTRY ActiveShaderProgram(GLuint pipeline, GLuint program)
 
 GLuint GL_APIENTRY CreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const *strings)
 {
-    EVENT_API_LOCK1("(GLenum type = %0x%X, GLsizei count = %d, const GLchar *const* = 0x%0.8p)", type, count,
+    EVENT("(GLenum type = %0x%X, GLsizei count = %d, const GLchar *const* = 0x%0.8p)", type, count,
           strings);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -259,7 +256,7 @@ GLuint GL_APIENTRY CreateShaderProgramv(GLenum type, GLsizei count, const GLchar
 
 void GL_APIENTRY BindProgramPipeline(GLuint pipeline)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u)", pipeline);
+    EVENT("(GLuint pipeline = %u)", pipeline);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -273,7 +270,7 @@ void GL_APIENTRY BindProgramPipeline(GLuint pipeline)
 
 void GL_APIENTRY DeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, const GLuint* pipelines = 0x%0.8p)", n, pipelines);
+    EVENT("(GLsizei n = %d, const GLuint* pipelines = 0x%0.8p)", n, pipelines);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -287,7 +284,7 @@ void GL_APIENTRY DeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
 
 void GL_APIENTRY GenProgramPipelines(GLsizei n, GLuint *pipelines)
 {
-    EVENT_API_LOCK1("(GLsizei n = %d, GLuint* pipelines = 0x%0.8p)", n, pipelines);
+    EVENT("(GLsizei n = %d, GLuint* pipelines = 0x%0.8p)", n, pipelines);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -301,7 +298,7 @@ void GL_APIENTRY GenProgramPipelines(GLsizei n, GLuint *pipelines)
 
 GLboolean GL_APIENTRY IsProgramPipeline(GLuint pipeline)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u)", pipeline);
+    EVENT("(GLuint pipeline = %u)", pipeline);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -316,7 +313,7 @@ GLboolean GL_APIENTRY IsProgramPipeline(GLuint pipeline)
 
 void GL_APIENTRY GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", pipeline, pname,
+    EVENT("(GLuint pipeline = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)", pipeline, pname,
           params);
     Context *context = GetValidGlobalContext();
     if (context)
@@ -407,7 +404,7 @@ void GL_APIENTRY ProgramUniform1iv(GLuint program,
                                    GLsizei count,
                                    const GLint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -430,7 +427,7 @@ void GL_APIENTRY ProgramUniform2iv(GLuint program,
                                    GLsizei count,
                                    const GLint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -453,7 +450,7 @@ void GL_APIENTRY ProgramUniform3iv(GLuint program,
                                    GLsizei count,
                                    const GLint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -476,7 +473,7 @@ void GL_APIENTRY ProgramUniform4iv(GLuint program,
                                    GLsizei count,
                                    const GLint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -499,7 +496,7 @@ void GL_APIENTRY ProgramUniform1uiv(GLuint program,
                                     GLsizei count,
                                     const GLuint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLuint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -522,7 +519,7 @@ void GL_APIENTRY ProgramUniform2uiv(GLuint program,
                                     GLsizei count,
                                     const GLuint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLuint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -545,7 +542,7 @@ void GL_APIENTRY ProgramUniform3uiv(GLuint program,
                                     GLsizei count,
                                     const GLuint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLuint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -568,7 +565,7 @@ void GL_APIENTRY ProgramUniform4uiv(GLuint program,
                                     GLsizei count,
                                     const GLuint *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLuint* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -591,7 +588,7 @@ void GL_APIENTRY ProgramUniform1fv(GLuint program,
                                    GLsizei count,
                                    const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLfloat* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -614,7 +611,7 @@ void GL_APIENTRY ProgramUniform2fv(GLuint program,
                                    GLsizei count,
                                    const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLfloat* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -637,7 +634,7 @@ void GL_APIENTRY ProgramUniform3fv(GLuint program,
                                    GLsizei count,
                                    const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLfloat* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -660,7 +657,7 @@ void GL_APIENTRY ProgramUniform4fv(GLuint program,
                                    GLsizei count,
                                    const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, const GLfloat* value = "
         "0x%0.8p)",
         program, location, count, value);
@@ -684,7 +681,7 @@ void GL_APIENTRY ProgramUniformMatrix2fv(GLuint program,
                                          GLboolean transpose,
                                          const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -709,7 +706,7 @@ void GL_APIENTRY ProgramUniformMatrix3fv(GLuint program,
                                          GLboolean transpose,
                                          const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -734,7 +731,7 @@ void GL_APIENTRY ProgramUniformMatrix4fv(GLuint program,
                                          GLboolean transpose,
                                          const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -759,7 +756,7 @@ void GL_APIENTRY ProgramUniformMatrix2x3fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -784,7 +781,7 @@ void GL_APIENTRY ProgramUniformMatrix3x2fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -809,7 +806,7 @@ void GL_APIENTRY ProgramUniformMatrix2x4fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -834,7 +831,7 @@ void GL_APIENTRY ProgramUniformMatrix4x2fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -859,7 +856,7 @@ void GL_APIENTRY ProgramUniformMatrix3x4fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -884,7 +881,7 @@ void GL_APIENTRY ProgramUniformMatrix4x3fv(GLuint program,
                                            GLboolean transpose,
                                            const GLfloat *value)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint program = %u, GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, "
         "const GLfloat* value = 0x%0.8p)",
         program, location, count, transpose, value);
@@ -905,7 +902,7 @@ void GL_APIENTRY ProgramUniformMatrix4x3fv(GLuint program,
 
 void GL_APIENTRY ValidateProgramPipeline(GLuint pipeline)
 {
-    EVENT_API_LOCK1("(GLuint pipeline = %u)", pipeline);
+    EVENT("(GLuint pipeline = %u)", pipeline);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -922,7 +919,7 @@ void GL_APIENTRY GetProgramPipelineInfoLog(GLuint pipeline,
                                            GLsizei *length,
                                            GLchar *infoLog)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint pipeline = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLchar* infoLog = "
         "0x%0.8p)",
         pipeline, bufSize, length, infoLog);
@@ -945,7 +942,7 @@ void GL_APIENTRY BindImageTexture(GLuint unit,
                                   GLenum access,
                                   GLenum format)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint unit = %u, GLuint texture = %u, GLint level = %d, GLboolean layered = %u, GLint "
         "layer = %d, GLenum access = 0x%X, GLenum format = 0x%X)",
         unit, texture, level, layered, layer, access, format);
@@ -962,7 +959,7 @@ void GL_APIENTRY BindImageTexture(GLuint unit,
 
 void GL_APIENTRY GetBooleani_v(GLenum target, GLuint index, GLboolean *data)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLuint index = %u, GLboolean* data = 0x%0.8p)", target, index,
+    EVENT("(GLenum target = 0x%X, GLuint index = %u, GLboolean* data = 0x%0.8p)", target, index,
           data);
 
     Context *context = GetValidGlobalContext();
@@ -978,7 +975,7 @@ void GL_APIENTRY GetBooleani_v(GLenum target, GLuint index, GLboolean *data)
 
 void GL_APIENTRY MemoryBarrier(GLbitfield barriers)
 {
-    EVENT_API_LOCK1("(GLbitfield barriers = 0x%X)", barriers);
+    EVENT("(GLbitfield barriers = 0x%X)", barriers);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -992,7 +989,7 @@ void GL_APIENTRY MemoryBarrier(GLbitfield barriers)
 
 void GL_APIENTRY MemoryBarrierByRegion(GLbitfield barriers)
 {
-    EVENT_API_LOCK1("(GLbitfield barriers = 0x%X)", barriers);
+    EVENT("(GLbitfield barriers = 0x%X)", barriers);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -1011,7 +1008,7 @@ void GL_APIENTRY TexStorage2DMultisample(GLenum target,
                                          GLsizei height,
                                          GLboolean fixedsamplelocations)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width "
         "= %d, GLsizei height = %d, GLboolean fixedsamplelocations = %u)",
         target, samples, internalformat, width, height, fixedsamplelocations);
@@ -1028,13 +1025,13 @@ void GL_APIENTRY TexStorage2DMultisample(GLenum target,
 
 void GL_APIENTRY GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
 {
-    EVENT_API_LOCK1("(GLenum pname = 0x%X, GLuint index = %u, GLfloat* val = 0x%0.8p)", pname, index, val);
+    EVENT("(GLenum pname = 0x%X, GLuint index = %u, GLfloat* val = 0x%0.8p)", pname, index, val);
     UNIMPLEMENTED();
 }
 
 void GL_APIENTRY SampleMaski(GLuint maskNumber, GLbitfield mask)
 {
-    EVENT_API_LOCK1("(GLuint maskNumber = %u, GLbitfield mask = 0x%X)", maskNumber, mask);
+    EVENT("(GLuint maskNumber = %u, GLbitfield mask = 0x%X)", maskNumber, mask);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -1048,14 +1045,14 @@ void GL_APIENTRY SampleMaski(GLuint maskNumber, GLbitfield mask)
 
 void GL_APIENTRY GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
 {
-    EVENT_API_LOCK1("(GLenum target = 0x%X, GLint level = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
+    EVENT("(GLenum target = 0x%X, GLint level = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)",
           target, level, pname, params);
     UNIMPLEMENTED();
 }
 
 void GL_APIENTRY GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLenum target = 0x%X, GLint level = %d, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)",
         target, level, pname, params);
     Context *context = GetValidGlobalContext();
@@ -1074,7 +1071,7 @@ void GL_APIENTRY BindVertexBuffer(GLuint bindingindex,
                                   GLintptr offset,
                                   GLsizei stride)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint bindingindex = %u, GLuint buffer = %u, GLintptr offset = %d, GLsizei stride = %d)",
         bindingindex, buffer, offset, stride);
     Context *context = GetValidGlobalContext();
@@ -1094,7 +1091,7 @@ void GL_APIENTRY VertexAttribFormat(GLuint attribindex,
                                     GLboolean normalized,
                                     GLuint relativeoffset)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint attribindex = %u, GLint size = %d, GLenum type = 0x%X, GLboolean normalized = %u, "
         "GLuint relativeoffset = %u)",
         attribindex, size, type, normalized, relativeoffset);
@@ -1114,7 +1111,7 @@ void GL_APIENTRY VertexAttribIFormat(GLuint attribindex,
                                      GLenum type,
                                      GLuint relativeoffset)
 {
-    EVENT_API_LOCK1(
+    EVENT(
         "(GLuint attribindex = %u, GLint size = %d, GLenum type = 0x%X, GLuint relativeoffset = "
         "%u)",
         attribindex, size, type, relativeoffset);
@@ -1131,7 +1128,7 @@ void GL_APIENTRY VertexAttribIFormat(GLuint attribindex,
 
 void GL_APIENTRY VertexAttribBinding(GLuint attribindex, GLuint bindingindex)
 {
-    EVENT_API_LOCK1("(GLuint attribindex = %u, GLuint bindingindex = %u)", attribindex, bindingindex);
+    EVENT("(GLuint attribindex = %u, GLuint bindingindex = %u)", attribindex, bindingindex);
     Context *context = GetValidGlobalContext();
     if (context)
     {
@@ -1145,7 +1142,7 @@ void GL_APIENTRY VertexAttribBinding(GLuint attribindex, GLuint bindingindex)
 
 void GL_APIENTRY VertexBindingDivisor(GLuint bindingindex, GLuint divisor)
 {
-    EVENT_API_LOCK1("(GLuint bindingindex = %u, GLuint divisor = %u)", bindingindex, divisor);
+    EVENT("(GLuint bindingindex = %u, GLuint divisor = %u)", bindingindex, divisor);
     Context *context = GetValidGlobalContext();
     if (context)
     {
diff --git a/src/libGLESv2/global_state.cpp b/src/libGLESv2/global_state.cpp
index d2d4e6619..bc776b1f7 100644
--- a/src/libGLESv2/global_state.cpp
+++ b/src/libGLESv2/global_state.cpp
@@ -16,11 +16,6 @@
 
 namespace gl
 {
-static Lock sGlobalRendererLock;
-
-Lock& getGlobalRendererLock() {
-    return sGlobalRendererLock;
-}
 
 Context *GetGlobalContext()
 {
@@ -79,39 +74,6 @@ Thread *GetCurrentThread()
     return (current ? current : AllocateCurrentThread());
 }
 
-gl::Context *gCurContext;
-Surface *gCurReadSurface;
-Surface *gCurDrawSurface;
-
-gl::Context *getCurContext()
-{
-    return gCurContext;
-}
-
-Surface *getCurReadSurface()
-{
-    return gCurReadSurface;
-}
-
-Surface *getCurDrawSurface()
-{
-    return gCurDrawSurface;
-}
-
-void setCurContext(gl::Context *context)
-{
-    gCurContext = context;
-}
-
-void setCurReadSurface(Surface *surface)
-{
-    gCurReadSurface = surface;
-}
-
-void setCurDrawSurface(Surface *surface)
-{
-    gCurDrawSurface = surface;
-}
 }  // namespace egl
 
 #ifdef ANGLE_PLATFORM_WINDOWS
diff --git a/src/libGLESv2/global_state.h b/src/libGLESv2/global_state.h
index b0be09352..3e3740c90 100644
--- a/src/libGLESv2/global_state.h
+++ b/src/libGLESv2/global_state.h
@@ -9,8 +9,6 @@
 #ifndef LIBGLESV2_GLOBALSTATE_H_
 #define LIBGLESV2_GLOBALSTATE_H_
 
-#include <windows.h>
-
 namespace gl
 {
 class Context;
@@ -18,41 +16,6 @@ class Context;
 Context *GetGlobalContext();
 Context *GetValidGlobalContext();
 
-// Duplicate of emulator's Lock and AutoLock
-// specialized to Windows
-
-//class ScopedLock;
-class Lock {
-public:
-	Lock() {
-		InitializeCriticalSection(&mLock);
-	}
-	~Lock() {
-		DeleteCriticalSection(&mLock);
-	}
-	void lock() {
-		EnterCriticalSection(&mLock);
-	}
-	void unlock() {
-		LeaveCriticalSection(&mLock);
-	}
-private:
-	CRITICAL_SECTION mLock;
-};
-
-class ScopedLock {
-public:
-	ScopedLock(Lock& lock) : mLock(lock) {
-		mLock.lock();
-	}
-	~ScopedLock() {
-		mLock.unlock();
-	}
-private:
-	Lock& mLock;
-};
-
-Lock& getGlobalRendererLock();
 }  // namespace gl
 
 namespace egl
@@ -61,15 +24,6 @@ class Thread;
 
 Thread *GetCurrentThread();
 
-class Surface;
-void setCurContext(gl::Context *context);
-gl::Context *getCurContext();
-
-void setCurReadSurface(Surface *surface);
-Surface *getCurReadSurface();
-
-void setCurDrawSurface(Surface *surface);
-Surface *getCurDrawSurface();
 }  // namespace egl
 
 #endif // LIBGLESV2_GLOBALSTATE_H_
